(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{410:function(e,t,n){"use strict";n.r(t),n.d(t,"MDXContext",(function(){return m})),n.d(t,"MDXProvider",(function(){return u})),n.d(t,"mdx",(function(){return f})),n.d(t,"useMDXComponents",(function(){return p})),n.d(t,"withMDXComponents",(function(){return d}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var m=a.a.createContext({}),d=function(e){return function(t){var n=p(t.components);return a.a.createElement(e,i({},t,{components:n}))}},p=function(e){var t=a.a.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=p(e.components);return a.a.createElement(m.Provider,{value:t},e.children)},g={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(n),d=r,u=m["".concat(i,".").concat(d)]||m[d]||g[d]||o;return n?a.a.createElement(u,s(s({ref:t},c),{},{components:n})):a.a.createElement(u,s({ref:t},c))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=b;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var l=2;l<o;l++)i[l]=n[l];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},69:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return m}));var r=n(3),a=n(9),o=(n(0),n(410)),i={title:"Integrating with Ren contracts",slug:"/integrating-contracts"},c={unversionedId:"integrating-contracts",id:"integrating-contracts",isDocsHomePage:!1,title:"Integrating with Ren contracts",description:"For now, integrating with Ren contracts is only documented for EVM chains and Solidity.",source:"@site/contracts/integrating-contracts.mdx",slug:"/integrating-contracts",permalink:"/ren-client-docs/contracts/integrating-contracts",editUrl:"https://github.com/renproject/ren-client-docs/edit/master/contracts/integrating-contracts.mdx",version:"current",sidebar:"contracts",previous:{title:"Contracts",permalink:"/ren-client-docs/contracts/"},next:{title:"Deployments",permalink:"/ren-client-docs/contracts/deployments"}},s=[{value:"Solidity",id:"solidity",children:[{value:"Importing Ren contracts",id:"importing-ren-contracts",children:[]},{value:"Writing a mint function",id:"writing-a-mint-function",children:[]},{value:"Testing on a local network",id:"testing-on-a-local-network",children:[]}]}],l={toc:s};function m(e){var t=e.components,n=Object(a.default)(e,["components"]);return Object(o.mdx)("wrapper",Object(r.default)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.mdx)("div",{className:"admonition admonition-tip alert alert--success"},Object(o.mdx)("div",{parentName:"div",className:"admonition-heading"},Object(o.mdx)("h5",{parentName:"div"},Object(o.mdx)("span",{parentName:"h5",className:"admonition-icon"},Object(o.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(o.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),Object(o.mdx)("div",{parentName:"div",className:"admonition-content"},Object(o.mdx)("p",{parentName:"div"},"For now, integrating with Ren contracts is only documented for EVM chains and Solidity."))),Object(o.mdx)("p",null,"The ",Object(o.mdx)("a",{parentName:"p",href:"/ren-js/tutorial/overview"},"RenJS Tutorial")," goes through writing a smart contract that can mint Ren-tokens."),Object(o.mdx)("p",null,"There is also the ",Object(o.mdx)("a",{parentName:"p",href:"https://github.com/renproject/ren-solidity-template"},"Ren Solidity Template")," repository includes local tests that test a mint function using RenJS and a mock RenVM provider."),Object(o.mdx)("h2",{id:"solidity"},"Solidity"),Object(o.mdx)("h3",{id:"importing-ren-contracts"},"Importing Ren contracts"),Object(o.mdx)("p",null,"The Ren contracts can be imported with the following packages:"),Object(o.mdx)("ul",null,Object(o.mdx)("li",{parentName:"ul"},Object(o.mdx)("a",{parentName:"li",href:"https://www.npmjs.com/package/@renproject/sol"},Object(o.mdx)("inlineCode",{parentName:"a"},"@renproject/sol"))," - for the DarknodeRegistry and DarknodePayment contracts"),Object(o.mdx)("li",{parentName:"ul"},Object(o.mdx)("a",{parentName:"li",href:"https://www.npmjs.com/package/@renproject/gateway-sol"},Object(o.mdx)("inlineCode",{parentName:"a"},"@renproject/gateway-sol"))," - for the GatewayRegistry, Gateway and RenERC20 contracts")),Object(o.mdx)("p",null,"Note that they currently require an older Solidity compiler version - ",Object(o.mdx)("inlineCode",{parentName:"p"},"0.5.17"),". You can configure Hardhat to use multiple Solidity versions by adding the following line to the ",Object(o.mdx)("inlineCode",{parentName:"p"},"networks")," field in ",Object(o.mdx)("inlineCode",{parentName:"p"},"hardhat.config.ts"),":"),Object(o.mdx)("pre",null,Object(o.mdx)("code",{parentName:"pre",className:"language-js"},'  solidity: {\n    compilers: [\n      {\n        version: "0.8.4",\n      },\n      {\n        version: "0.5.17",\n      },\n    ],\n  },\n')),Object(o.mdx)("p",null,"You can then import contracts in Solidity like so:"),Object(o.mdx)("pre",null,Object(o.mdx)("code",{parentName:"pre",className:"language-solidity"},'import {GatewayRegistry} from "@renproject/gateway-sol/contracts/Gateway/GatewayRegistry.sol";\n')),Object(o.mdx)("h3",{id:"writing-a-mint-function"},"Writing a mint function"),Object(o.mdx)("p",null,"In order for a contract to be compatible with how RenJS submits mints, the function being called must follow the following standard:"),Object(o.mdx)("pre",null,Object(o.mdx)("code",{parentName:"pre",className:"language-solidity"},'function functionName(\n\n    // Normal parameters - can be any number and types\n    uint256 _param1,\n    uint256 _param2,\n\n    // Parameters from RenVM\n    uint256        _amount,\n    bytes32        _nHash,\n    bytes calldata _sig\n\n) external {\n\n  // ... your code\n\n  // Hash parameters. All parameters besides _amount, _nHash and _sig should be included.\n  bytes32 pHash = keccak256(abi.encode(_param1, _param2));\n\n  // Mint Ren-asset. The returned value is how much was minted, after subtracting RenVM fees.\n  uint256 mintedAmount = registry.getGatewayBySymbol("BTC").mint(pHash, _amount, _nHash, _sig);\n\n  // ... your code\n\n}\n')),Object(o.mdx)("p",null,"If you want to support multiple Ren-assets, then you can pass in a ",Object(o.mdx)("inlineCode",{parentName:"p"},"_symbol")," parameter anywhere in the parameters (before the ",Object(o.mdx)("inlineCode",{parentName:"p"},"_amount")," parameter) and pass it to ",Object(o.mdx)("inlineCode",{parentName:"p"},"getGatewayBySymbol"),"."),Object(o.mdx)("h3",{id:"testing-on-a-local-network"},"Testing on a local network"),Object(o.mdx)("p",null,"See ",Object(o.mdx)("a",{parentName:"p",href:"https://github.com/renproject/ren-solidity-template"},"Ren Solidity Template"),"."))}m.isMDXComponent=!0}}]);