(window.webpackJsonp=window.webpackJsonp||[]).push([[342],{375:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return d})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return p}));var a=n(3),r=n(8),m=(n(0),n(498)),i={id:"lib_interfaces_build_main_chain.chaincommon",title:"Interface: ChainCommon<Transaction, Address, Network>",sidebar_label:"ChainCommon",custom_edit_url:null},d={unversionedId:"api/interfaces/lib_interfaces_build_main_chain.chaincommon",id:"api/interfaces/lib_interfaces_build_main_chain.chaincommon",isDocsHomePage:!1,title:"Interface: ChainCommon<Transaction, Address, Network>",description:"Interface: ChainCommon",source:"@site/ren-js/api/interfaces/lib_interfaces_build_main_chain.chaincommon.md",slug:"/api/interfaces/lib_interfaces_build_main_chain.chaincommon",permalink:"/ren-client-docs/ren-js/api/interfaces/lib_interfaces_build_main_chain.chaincommon",editUrl:null,version:"current",sidebar_label:"ChainCommon"},c=[{value:"Type parameters",id:"type-parameters",children:[]},{value:"Hierarchy",id:"hierarchy",children:[]},{value:"Properties",id:"properties",children:[{value:"assetDecimals",id:"assetdecimals",children:[]},{value:"assetIsNative",id:"assetisnative",children:[]},{value:"assetIsSupported",id:"assetissupported",children:[]},{value:"initialize",id:"initialize",children:[]},{value:"legacyName",id:"legacyname",children:[]},{value:"name",id:"name",children:[]},{value:"renNetwork",id:"rennetwork",children:[]},{value:"transactionConfidence",id:"transactionconfidence",children:[]},{value:"transactionFromID",id:"transactionfromid",children:[]},{value:"transactionID",id:"transactionid",children:[]},{value:"transactionRPCFormat",id:"transactionrpcformat",children:[]},{value:"utils",id:"utils",children:[]},{value:"withProvider",id:"withprovider",children:[]}]}],l={toc:c};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(m.mdx)("wrapper",Object(a.default)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(m.mdx)("h1",{id:"interface-chaincommontransaction-address-network"},"Interface: ChainCommon<Transaction, Address, Network",">"),Object(m.mdx)("p",null,Object(m.mdx)("a",{parentName:"p",href:"/ren-client-docs/ren-js/api/modules/lib_interfaces_build_main_chain"},"lib/interfaces/build/main/chain"),".ChainCommon"),Object(m.mdx)("h1",{id:"adding-chains"},"Adding chains"),Object(m.mdx)("p",null,"Once a chain has been added to the ",Object(m.mdx)("a",{parentName:"p",href:"https://github.com/renproject/multichain"},"multichain repo")," and accepted by the\ndarknodes, a handler can be written for RenJS."),Object(m.mdx)("p",null,"The expected interface can be found in ",Object(m.mdx)("inlineCode",{parentName:"p"},"../interfaces/src/chain.ts"),". There are two types of chains - lock chains and\nmint chains, each requiring a different handler interface. Lock chain handlers are for chains where funds are locked\nup under RenVM's control - e.g. Bitcoin or Zcash. A mint chain handler is for the chain where the wrapped tokens are\ncreated - e.g. Ethereum."),Object(m.mdx)("p",null,"If a chain is a fork of another supported chain, it's recommended that the handler extends the forked chain's\nhandler."),Object(m.mdx)("p",null,"If a chain has multiple assets (e.g. ETH and ERC20s), it's recommended that a single handler is written that supports\nall the relevant assets."),Object(m.mdx)("h2",{id:"type-parameters"},"Type parameters"),Object(m.mdx)("table",null,Object(m.mdx)("thead",{parentName:"table"},Object(m.mdx)("tr",{parentName:"thead"},Object(m.mdx)("th",{parentName:"tr",align:"left"},"Name"),Object(m.mdx)("th",{parentName:"tr",align:"left"},"Type"),Object(m.mdx)("th",{parentName:"tr",align:"left"},"Default"))),Object(m.mdx)("tbody",{parentName:"table"},Object(m.mdx)("tr",{parentName:"tbody"},Object(m.mdx)("td",{parentName:"tr",align:"left"},Object(m.mdx)("inlineCode",{parentName:"td"},"Transaction")),Object(m.mdx)("td",{parentName:"tr",align:"left"},"-"),Object(m.mdx)("td",{parentName:"tr",align:"left"},Object(m.mdx)("em",{parentName:"td"},"any"))),Object(m.mdx)("tr",{parentName:"tbody"},Object(m.mdx)("td",{parentName:"tr",align:"left"},Object(m.mdx)("inlineCode",{parentName:"td"},"Address")),Object(m.mdx)("td",{parentName:"tr",align:"left"},Object(m.mdx)("em",{parentName:"td"},"string")," ","|"," { ",Object(m.mdx)("inlineCode",{parentName:"td"},"address"),": ",Object(m.mdx)("em",{parentName:"td"},"string"),"  }"),Object(m.mdx)("td",{parentName:"tr",align:"left"},Object(m.mdx)("em",{parentName:"td"},"any"))),Object(m.mdx)("tr",{parentName:"tbody"},Object(m.mdx)("td",{parentName:"tr",align:"left"},Object(m.mdx)("inlineCode",{parentName:"td"},"Network")),Object(m.mdx)("td",{parentName:"tr",align:"left"},"-"),Object(m.mdx)("td",{parentName:"tr",align:"left"},Object(m.mdx)("em",{parentName:"td"},"any"))))),Object(m.mdx)("h2",{id:"hierarchy"},"Hierarchy"),Object(m.mdx)("ul",null,Object(m.mdx)("li",{parentName:"ul"},Object(m.mdx)("p",{parentName:"li"},Object(m.mdx)("a",{parentName:"p",href:"/ren-client-docs/ren-js/api/interfaces/lib_interfaces_build_main_chain.chainstatic"},Object(m.mdx)("em",{parentName:"a"},"ChainStatic")),"<Transaction, Address, Network",">"),Object(m.mdx)("p",{parentName:"li"},"\u21b3 ",Object(m.mdx)("strong",{parentName:"p"},"ChainCommon")),Object(m.mdx)("p",{parentName:"li"},"\u21b3\u21b3 ",Object(m.mdx)("a",{parentName:"p",href:"/ren-client-docs/ren-js/api/interfaces/lib_interfaces_build_main_chain.lockchain"},Object(m.mdx)("em",{parentName:"a"},"LockChain"))),Object(m.mdx)("p",{parentName:"li"},"\u21b3\u21b3 ",Object(m.mdx)("a",{parentName:"p",href:"/ren-client-docs/ren-js/api/interfaces/lib_interfaces_build_main_chain.mintchain"},Object(m.mdx)("em",{parentName:"a"},"MintChain"))))),Object(m.mdx)("h2",{id:"properties"},"Properties"),Object(m.mdx)("h3",{id:"assetdecimals"},"assetDecimals"),Object(m.mdx)("p",null,"\u2022 ",Object(m.mdx)("strong",{parentName:"p"},"assetDecimals"),": (",Object(m.mdx)("inlineCode",{parentName:"p"},"asset"),": ",Object(m.mdx)("em",{parentName:"p"},"string"),") => ",Object(m.mdx)("a",{parentName:"p",href:"/ren-client-docs/ren-js/api/modules/lib_interfaces_build_main_chain#syncorpromise"},Object(m.mdx)("em",{parentName:"a"},"SyncOrPromise")),"<number",">"),Object(m.mdx)("p",null,Object(m.mdx)("inlineCode",{parentName:"p"},"assetDecimals")," should return the number of decimals of the asset."),Object(m.mdx)("p",null,"If the asset is not supported, an error should be thrown."),Object(m.mdx)("pre",null,Object(m.mdx)("code",{parentName:"pre",className:"language-ts"},'bitcoin.assetDecimals = asset => {\n    if (asset === "BTC") { return 8; }\n    throw new Error(`Unsupported asset ${asset}.`);\n}\n')),Object(m.mdx)("h4",{id:"type-declaration"},"Type declaration"),Object(m.mdx)("p",null,"\u25b8 (",Object(m.mdx)("inlineCode",{parentName:"p"},"asset"),": ",Object(m.mdx)("em",{parentName:"p"},"string"),"): ",Object(m.mdx)("a",{parentName:"p",href:"/ren-client-docs/ren-js/api/modules/lib_interfaces_build_main_chain#syncorpromise"},Object(m.mdx)("em",{parentName:"a"},"SyncOrPromise")),"<number",">"),Object(m.mdx)("h4",{id:"parameters"},"Parameters"),Object(m.mdx)("table",null,Object(m.mdx)("thead",{parentName:"table"},Object(m.mdx)("tr",{parentName:"thead"},Object(m.mdx)("th",{parentName:"tr",align:"left"},"Name"),Object(m.mdx)("th",{parentName:"tr",align:"left"},"Type"))),Object(m.mdx)("tbody",{parentName:"table"},Object(m.mdx)("tr",{parentName:"tbody"},Object(m.mdx)("td",{parentName:"tr",align:"left"},Object(m.mdx)("inlineCode",{parentName:"td"},"asset")),Object(m.mdx)("td",{parentName:"tr",align:"left"},Object(m.mdx)("em",{parentName:"td"},"string"))))),Object(m.mdx)("p",null,Object(m.mdx)("strong",{parentName:"p"},"Returns:")," ",Object(m.mdx)("a",{parentName:"p",href:"/ren-client-docs/ren-js/api/modules/lib_interfaces_build_main_chain#syncorpromise"},Object(m.mdx)("em",{parentName:"a"},"SyncOrPromise")),"<number",">"),Object(m.mdx)("p",null,"Defined in: ren-js/packages/lib/interfaces/build/main/chain.d.ts:93"),Object(m.mdx)("hr",null),Object(m.mdx)("h3",{id:"assetisnative"},"assetIsNative"),Object(m.mdx)("p",null,"\u2022 ",Object(m.mdx)("strong",{parentName:"p"},"assetIsNative"),": (",Object(m.mdx)("inlineCode",{parentName:"p"},"asset"),": ",Object(m.mdx)("em",{parentName:"p"},"string"),") => ",Object(m.mdx)("a",{parentName:"p",href:"/ren-client-docs/ren-js/api/modules/lib_interfaces_build_main_chain#syncorpromise"},Object(m.mdx)("em",{parentName:"a"},"SyncOrPromise")),"<boolean",">"),Object(m.mdx)("p",null,Object(m.mdx)("inlineCode",{parentName:"p"},"assetIsNative")," should return true if the asset is native to the Chain.\nMint-chains should return ",Object(m.mdx)("inlineCode",{parentName:"p"},"false")," for assets that have been bridged to\nit."),Object(m.mdx)("pre",null,Object(m.mdx)("code",{parentName:"pre",className:"language-ts"},'ethereum.assetIsNative = asset => asset === "ETH" ||;\n')),Object(m.mdx)("h4",{id:"type-declaration-1"},"Type declaration"),Object(m.mdx)("p",null,"\u25b8 (",Object(m.mdx)("inlineCode",{parentName:"p"},"asset"),": ",Object(m.mdx)("em",{parentName:"p"},"string"),"): ",Object(m.mdx)("a",{parentName:"p",href:"/ren-client-docs/ren-js/api/modules/lib_interfaces_build_main_chain#syncorpromise"},Object(m.mdx)("em",{parentName:"a"},"SyncOrPromise")),"<boolean",">"),Object(m.mdx)("h4",{id:"parameters-1"},"Parameters"),Object(m.mdx)("table",null,Object(m.mdx)("thead",{parentName:"table"},Object(m.mdx)("tr",{parentName:"thead"},Object(m.mdx)("th",{parentName:"tr",align:"left"},"Name"),Object(m.mdx)("th",{parentName:"tr",align:"left"},"Type"))),Object(m.mdx)("tbody",{parentName:"table"},Object(m.mdx)("tr",{parentName:"tbody"},Object(m.mdx)("td",{parentName:"tr",align:"left"},Object(m.mdx)("inlineCode",{parentName:"td"},"asset")),Object(m.mdx)("td",{parentName:"tr",align:"left"},Object(m.mdx)("em",{parentName:"td"},"string"))))),Object(m.mdx)("p",null,Object(m.mdx)("strong",{parentName:"p"},"Returns:")," ",Object(m.mdx)("a",{parentName:"p",href:"/ren-client-docs/ren-js/api/modules/lib_interfaces_build_main_chain#syncorpromise"},Object(m.mdx)("em",{parentName:"a"},"SyncOrPromise")),"<boolean",">"),Object(m.mdx)("p",null,"Defined in: ren-js/packages/lib/interfaces/build/main/chain.d.ts:71"),Object(m.mdx)("hr",null),Object(m.mdx)("h3",{id:"assetissupported"},"assetIsSupported"),Object(m.mdx)("p",null,"\u2022 ",Object(m.mdx)("strong",{parentName:"p"},"assetIsSupported"),": (",Object(m.mdx)("inlineCode",{parentName:"p"},"asset"),": ",Object(m.mdx)("em",{parentName:"p"},"string"),") => ",Object(m.mdx)("a",{parentName:"p",href:"/ren-client-docs/ren-js/api/modules/lib_interfaces_build_main_chain#syncorpromise"},Object(m.mdx)("em",{parentName:"a"},"SyncOrPromise")),"<boolean",">"),Object(m.mdx)("p",null,Object(m.mdx)("inlineCode",{parentName:"p"},"assetIsSupported")," should return true if the the asset is native to the\nchain or if the asset can be minted onto the chain."),Object(m.mdx)("pre",null,Object(m.mdx)("code",{parentName:"pre",className:"language-ts"},'ethereum.assetIsSupported = asset => asset === "ETH" || asset === "BTC" || ...;\n')),Object(m.mdx)("h4",{id:"type-declaration-2"},"Type declaration"),Object(m.mdx)("p",null,"\u25b8 (",Object(m.mdx)("inlineCode",{parentName:"p"},"asset"),": ",Object(m.mdx)("em",{parentName:"p"},"string"),"): ",Object(m.mdx)("a",{parentName:"p",href:"/ren-client-docs/ren-js/api/modules/lib_interfaces_build_main_chain#syncorpromise"},Object(m.mdx)("em",{parentName:"a"},"SyncOrPromise")),"<boolean",">"),Object(m.mdx)("h4",{id:"parameters-2"},"Parameters"),Object(m.mdx)("table",null,Object(m.mdx)("thead",{parentName:"table"},Object(m.mdx)("tr",{parentName:"thead"},Object(m.mdx)("th",{parentName:"tr",align:"left"},"Name"),Object(m.mdx)("th",{parentName:"tr",align:"left"},"Type"))),Object(m.mdx)("tbody",{parentName:"table"},Object(m.mdx)("tr",{parentName:"tbody"},Object(m.mdx)("td",{parentName:"tr",align:"left"},Object(m.mdx)("inlineCode",{parentName:"td"},"asset")),Object(m.mdx)("td",{parentName:"tr",align:"left"},Object(m.mdx)("em",{parentName:"td"},"string"))))),Object(m.mdx)("p",null,Object(m.mdx)("strong",{parentName:"p"},"Returns:")," ",Object(m.mdx)("a",{parentName:"p",href:"/ren-client-docs/ren-js/api/modules/lib_interfaces_build_main_chain#syncorpromise"},Object(m.mdx)("em",{parentName:"a"},"SyncOrPromise")),"<boolean",">"),Object(m.mdx)("p",null,"Defined in: ren-js/packages/lib/interfaces/build/main/chain.d.ts:80"),Object(m.mdx)("hr",null),Object(m.mdx)("h3",{id:"initialize"},"initialize"),Object(m.mdx)("p",null,"\u2022 ",Object(m.mdx)("strong",{parentName:"p"},"initialize"),": (",Object(m.mdx)("inlineCode",{parentName:"p"},"network"),": ",Object(m.mdx)("a",{parentName:"p",href:"/ren-client-docs/ren-js/api/interfaces/lib_interfaces_build_main_networks.rennetworkdetails"},Object(m.mdx)("em",{parentName:"a"},"RenNetworkDetails"))," ","|"," ",Object(m.mdx)("a",{parentName:"p",href:"/ren-client-docs/ren-js/api/enums/lib_interfaces_build_main_networks.rennetwork"},Object(m.mdx)("em",{parentName:"a"},"RenNetwork"))," ","|"," ",Object(m.mdx)("a",{parentName:"p",href:"/ren-client-docs/ren-js/api/modules/lib_interfaces_build_main_networks#rennetworkstring"},Object(m.mdx)("em",{parentName:"a"},"RenNetworkString")),") => ",Object(m.mdx)("a",{parentName:"p",href:"/ren-client-docs/ren-js/api/modules/lib_interfaces_build_main_chain#syncorpromise"},Object(m.mdx)("em",{parentName:"a"},"SyncOrPromise")),"<",Object(m.mdx)("a",{parentName:"p",href:"/ren-client-docs/ren-js/api/interfaces/lib_interfaces_build_main_chain.chaincommon"},Object(m.mdx)("em",{parentName:"a"},"ChainCommon")),"<Transaction, Address, Network",">",">"),Object(m.mdx)("p",null,Object(m.mdx)("inlineCode",{parentName:"p"},"initialize")," allows RenJS to pass in parameters after the user has\ninitialized the Chain. This allows the user to pass in network\nparameters such as the network only once."),Object(m.mdx)("p",null,"If the Chain's constructor has an optional network parameter and the\nuser has explicitly initialized it, the Chain should ignore the\nnetwork passed in to ",Object(m.mdx)("inlineCode",{parentName:"p"},"initialize"),". This is to allow different network\ncombinations, such as working with testnet Bitcoin and a local Ethereum\nchain - whereas the default ",Object(m.mdx)("inlineCode",{parentName:"p"},"testnet")," configuration would use testnet\nBitcoin and Ethereum's Kovan testnet."),Object(m.mdx)("h4",{id:"type-declaration-3"},"Type declaration"),Object(m.mdx)("p",null,"\u25b8 (",Object(m.mdx)("inlineCode",{parentName:"p"},"network"),": ",Object(m.mdx)("a",{parentName:"p",href:"/ren-client-docs/ren-js/api/interfaces/lib_interfaces_build_main_networks.rennetworkdetails"},Object(m.mdx)("em",{parentName:"a"},"RenNetworkDetails"))," ","|"," ",Object(m.mdx)("a",{parentName:"p",href:"/ren-client-docs/ren-js/api/enums/lib_interfaces_build_main_networks.rennetwork"},Object(m.mdx)("em",{parentName:"a"},"RenNetwork"))," ","|"," ",Object(m.mdx)("a",{parentName:"p",href:"/ren-client-docs/ren-js/api/modules/lib_interfaces_build_main_networks#rennetworkstring"},Object(m.mdx)("em",{parentName:"a"},"RenNetworkString")),"): ",Object(m.mdx)("a",{parentName:"p",href:"/ren-client-docs/ren-js/api/modules/lib_interfaces_build_main_chain#syncorpromise"},Object(m.mdx)("em",{parentName:"a"},"SyncOrPromise")),"<",Object(m.mdx)("a",{parentName:"p",href:"/ren-client-docs/ren-js/api/interfaces/lib_interfaces_build_main_chain.chaincommon"},Object(m.mdx)("em",{parentName:"a"},"ChainCommon")),"<Transaction, Address, Network",">",">"),Object(m.mdx)("h4",{id:"parameters-3"},"Parameters"),Object(m.mdx)("table",null,Object(m.mdx)("thead",{parentName:"table"},Object(m.mdx)("tr",{parentName:"thead"},Object(m.mdx)("th",{parentName:"tr",align:"left"},"Name"),Object(m.mdx)("th",{parentName:"tr",align:"left"},"Type"))),Object(m.mdx)("tbody",{parentName:"table"},Object(m.mdx)("tr",{parentName:"tbody"},Object(m.mdx)("td",{parentName:"tr",align:"left"},Object(m.mdx)("inlineCode",{parentName:"td"},"network")),Object(m.mdx)("td",{parentName:"tr",align:"left"},Object(m.mdx)("a",{parentName:"td",href:"/ren-client-docs/ren-js/api/interfaces/lib_interfaces_build_main_networks.rennetworkdetails"},Object(m.mdx)("em",{parentName:"a"},"RenNetworkDetails"))," ","|"," ",Object(m.mdx)("a",{parentName:"td",href:"/ren-client-docs/ren-js/api/enums/lib_interfaces_build_main_networks.rennetwork"},Object(m.mdx)("em",{parentName:"a"},"RenNetwork"))," ","|"," ",Object(m.mdx)("a",{parentName:"td",href:"/ren-client-docs/ren-js/api/modules/lib_interfaces_build_main_networks#rennetworkstring"},Object(m.mdx)("em",{parentName:"a"},"RenNetworkString")))))),Object(m.mdx)("p",null,Object(m.mdx)("strong",{parentName:"p"},"Returns:")," ",Object(m.mdx)("a",{parentName:"p",href:"/ren-client-docs/ren-js/api/modules/lib_interfaces_build_main_chain#syncorpromise"},Object(m.mdx)("em",{parentName:"a"},"SyncOrPromise")),"<",Object(m.mdx)("a",{parentName:"p",href:"/ren-client-docs/ren-js/api/interfaces/lib_interfaces_build_main_chain.chaincommon"},Object(m.mdx)("em",{parentName:"a"},"ChainCommon")),"<Transaction, Address, Network",">",">"),Object(m.mdx)("p",null,"Defined in: ren-js/packages/lib/interfaces/build/main/chain.d.ts:60"),Object(m.mdx)("hr",null),Object(m.mdx)("h3",{id:"legacyname"},"legacyName"),Object(m.mdx)("p",null,"\u2022 ",Object(m.mdx)("inlineCode",{parentName:"p"},"Optional")," ",Object(m.mdx)("strong",{parentName:"p"},"legacyName"),": ",Object(m.mdx)("em",{parentName:"p"},"string")),Object(m.mdx)("p",null,"The name of the Chain used the v0.2 RenVM nodes."),Object(m.mdx)("pre",null,Object(m.mdx)("code",{parentName:"pre",className:"language-ts"},'bitcoin.legacyName = "Btc";\n')),Object(m.mdx)("p",null,"Defined in: ren-js/packages/lib/interfaces/build/main/chain.d.ts:43"),Object(m.mdx)("hr",null),Object(m.mdx)("h3",{id:"name"},"name"),Object(m.mdx)("p",null,"\u2022 ",Object(m.mdx)("strong",{parentName:"p"},"name"),": ",Object(m.mdx)("em",{parentName:"p"},"string")),Object(m.mdx)("p",null,"The name of the Chain."),Object(m.mdx)("pre",null,Object(m.mdx)("code",{parentName:"pre",className:"language-ts"},'bitcoin.name = "Bitcoin";\n')),Object(m.mdx)("p",null,"Defined in: ren-js/packages/lib/interfaces/build/main/chain.d.ts:35"),Object(m.mdx)("hr",null),Object(m.mdx)("h3",{id:"rennetwork"},"renNetwork"),Object(m.mdx)("p",null,"\u2022 ",Object(m.mdx)("inlineCode",{parentName:"p"},"Optional")," ",Object(m.mdx)("strong",{parentName:"p"},"renNetwork"),": ",Object(m.mdx)("a",{parentName:"p",href:"/ren-client-docs/ren-js/api/interfaces/lib_interfaces_build_main_networks.rennetworkdetails"},Object(m.mdx)("em",{parentName:"a"},"RenNetworkDetails"))),Object(m.mdx)("p",null,"Should be set by ",Object(m.mdx)("inlineCode",{parentName:"p"},"constructor")," or ",Object(m.mdx)("inlineCode",{parentName:"p"},"initialize"),"."),Object(m.mdx)("p",null,"Defined in: ren-js/packages/lib/interfaces/build/main/chain.d.ts:47"),Object(m.mdx)("hr",null),Object(m.mdx)("h3",{id:"transactionconfidence"},"transactionConfidence"),Object(m.mdx)("p",null,"\u2022 ",Object(m.mdx)("strong",{parentName:"p"},"transactionConfidence"),": (",Object(m.mdx)("inlineCode",{parentName:"p"},"transaction"),": Transaction) => ",Object(m.mdx)("a",{parentName:"p",href:"/ren-client-docs/ren-js/api/modules/lib_interfaces_build_main_chain#syncorpromise"},Object(m.mdx)("em",{parentName:"a"},"SyncOrPromise")),"<{ ",Object(m.mdx)("inlineCode",{parentName:"p"},"current"),": ",Object(m.mdx)("em",{parentName:"p"},"number")," ; ",Object(m.mdx)("inlineCode",{parentName:"p"},"target"),": ",Object(m.mdx)("em",{parentName:"p"},"number"),"  }",">"),Object(m.mdx)("p",null,Object(m.mdx)("inlineCode",{parentName:"p"},"transactionConfidence")," should return a target and a current\nconfidence that the deposit is irreversible. For most chains, this will\nbe represented by the number of blocks that have passed."),Object(m.mdx)("p",null,"For example, a Bitcoin transaction with 2 confirmations will return\n",Object(m.mdx)("inlineCode",{parentName:"p"},"{ current: 2, target: 6 }")," on mainnet, where the target is currently 6\nconfirmations."),Object(m.mdx)("p",null,Object(m.mdx)("strong",{parentName:"p"},Object(m.mdx)("inlineCode",{parentName:"strong"},"dev"))," Must be compatible with the matching RenVM multichain LockChain."),Object(m.mdx)("h4",{id:"type-declaration-4"},"Type declaration"),Object(m.mdx)("p",null,"\u25b8 (",Object(m.mdx)("inlineCode",{parentName:"p"},"transaction"),": Transaction): ",Object(m.mdx)("a",{parentName:"p",href:"/ren-client-docs/ren-js/api/modules/lib_interfaces_build_main_chain#syncorpromise"},Object(m.mdx)("em",{parentName:"a"},"SyncOrPromise")),"<{ ",Object(m.mdx)("inlineCode",{parentName:"p"},"current"),": ",Object(m.mdx)("em",{parentName:"p"},"number")," ; ",Object(m.mdx)("inlineCode",{parentName:"p"},"target"),": ",Object(m.mdx)("em",{parentName:"p"},"number"),"  }",">"),Object(m.mdx)("h4",{id:"parameters-4"},"Parameters"),Object(m.mdx)("table",null,Object(m.mdx)("thead",{parentName:"table"},Object(m.mdx)("tr",{parentName:"thead"},Object(m.mdx)("th",{parentName:"tr",align:"left"},"Name"),Object(m.mdx)("th",{parentName:"tr",align:"left"},"Type"))),Object(m.mdx)("tbody",{parentName:"table"},Object(m.mdx)("tr",{parentName:"tbody"},Object(m.mdx)("td",{parentName:"tr",align:"left"},Object(m.mdx)("inlineCode",{parentName:"td"},"transaction")),Object(m.mdx)("td",{parentName:"tr",align:"left"},"Transaction")))),Object(m.mdx)("p",null,Object(m.mdx)("strong",{parentName:"p"},"Returns:")," ",Object(m.mdx)("a",{parentName:"p",href:"/ren-client-docs/ren-js/api/modules/lib_interfaces_build_main_chain#syncorpromise"},Object(m.mdx)("em",{parentName:"a"},"SyncOrPromise")),"<{ ",Object(m.mdx)("inlineCode",{parentName:"p"},"current"),": ",Object(m.mdx)("em",{parentName:"p"},"number")," ; ",Object(m.mdx)("inlineCode",{parentName:"p"},"target"),": ",Object(m.mdx)("em",{parentName:"p"},"number"),"  }",">"),Object(m.mdx)("p",null,"Defined in: ren-js/packages/lib/interfaces/build/main/chain.d.ts:110"),Object(m.mdx)("hr",null),Object(m.mdx)("h3",{id:"transactionfromid"},"transactionFromID"),Object(m.mdx)("p",null,"\u2022 ",Object(m.mdx)("strong",{parentName:"p"},"transactionFromID"),": (",Object(m.mdx)("inlineCode",{parentName:"p"},"txid"),": ",Object(m.mdx)("em",{parentName:"p"},"string")," ","|"," ",Object(m.mdx)("em",{parentName:"p"},"Buffer"),", ",Object(m.mdx)("inlineCode",{parentName:"p"},"txindex"),": ",Object(m.mdx)("em",{parentName:"p"},"string"),", ",Object(m.mdx)("inlineCode",{parentName:"p"},"reversed?"),": ",Object(m.mdx)("em",{parentName:"p"},"boolean"),") => ",Object(m.mdx)("a",{parentName:"p",href:"/ren-client-docs/ren-js/api/modules/lib_interfaces_build_main_chain#syncorpromise"},Object(m.mdx)("em",{parentName:"a"},"SyncOrPromise")),"<Transaction",">"),Object(m.mdx)("h4",{id:"type-declaration-5"},"Type declaration"),Object(m.mdx)("p",null,"\u25b8 (",Object(m.mdx)("inlineCode",{parentName:"p"},"txid"),": ",Object(m.mdx)("em",{parentName:"p"},"string")," ","|"," ",Object(m.mdx)("em",{parentName:"p"},"Buffer"),", ",Object(m.mdx)("inlineCode",{parentName:"p"},"txindex"),": ",Object(m.mdx)("em",{parentName:"p"},"string"),", ",Object(m.mdx)("inlineCode",{parentName:"p"},"reversed?"),": ",Object(m.mdx)("em",{parentName:"p"},"boolean"),"): ",Object(m.mdx)("a",{parentName:"p",href:"/ren-client-docs/ren-js/api/modules/lib_interfaces_build_main_chain#syncorpromise"},Object(m.mdx)("em",{parentName:"a"},"SyncOrPromise")),"<Transaction",">"),Object(m.mdx)("h4",{id:"parameters-5"},"Parameters"),Object(m.mdx)("table",null,Object(m.mdx)("thead",{parentName:"table"},Object(m.mdx)("tr",{parentName:"thead"},Object(m.mdx)("th",{parentName:"tr",align:"left"},"Name"),Object(m.mdx)("th",{parentName:"tr",align:"left"},"Type"))),Object(m.mdx)("tbody",{parentName:"table"},Object(m.mdx)("tr",{parentName:"tbody"},Object(m.mdx)("td",{parentName:"tr",align:"left"},Object(m.mdx)("inlineCode",{parentName:"td"},"txid")),Object(m.mdx)("td",{parentName:"tr",align:"left"},Object(m.mdx)("em",{parentName:"td"},"string")," ","|"," ",Object(m.mdx)("em",{parentName:"td"},"Buffer"))),Object(m.mdx)("tr",{parentName:"tbody"},Object(m.mdx)("td",{parentName:"tr",align:"left"},Object(m.mdx)("inlineCode",{parentName:"td"},"txindex")),Object(m.mdx)("td",{parentName:"tr",align:"left"},Object(m.mdx)("em",{parentName:"td"},"string"))),Object(m.mdx)("tr",{parentName:"tbody"},Object(m.mdx)("td",{parentName:"tr",align:"left"},Object(m.mdx)("inlineCode",{parentName:"td"},"reversed?")),Object(m.mdx)("td",{parentName:"tr",align:"left"},Object(m.mdx)("em",{parentName:"td"},"boolean"))))),Object(m.mdx)("p",null,Object(m.mdx)("strong",{parentName:"p"},"Returns:")," ",Object(m.mdx)("a",{parentName:"p",href:"/ren-client-docs/ren-js/api/modules/lib_interfaces_build_main_chain#syncorpromise"},Object(m.mdx)("em",{parentName:"a"},"SyncOrPromise")),"<Transaction",">"),Object(m.mdx)("p",null,"Defined in: ren-js/packages/lib/interfaces/build/main/chain.d.ts:118"),Object(m.mdx)("hr",null),Object(m.mdx)("h3",{id:"transactionid"},"transactionID"),Object(m.mdx)("p",null,"\u2022 ",Object(m.mdx)("strong",{parentName:"p"},"transactionID"),": (",Object(m.mdx)("inlineCode",{parentName:"p"},"transaction"),": Transaction) => ",Object(m.mdx)("em",{parentName:"p"},"string")),Object(m.mdx)("p",null,Object(m.mdx)("inlineCode",{parentName:"p"},"transactionID")," should return a string that uniquely represents the\ntransaction."),Object(m.mdx)("h4",{id:"type-declaration-6"},"Type declaration"),Object(m.mdx)("p",null,"\u25b8 (",Object(m.mdx)("inlineCode",{parentName:"p"},"transaction"),": Transaction): ",Object(m.mdx)("em",{parentName:"p"},"string")),Object(m.mdx)("h4",{id:"parameters-6"},"Parameters"),Object(m.mdx)("table",null,Object(m.mdx)("thead",{parentName:"table"},Object(m.mdx)("tr",{parentName:"thead"},Object(m.mdx)("th",{parentName:"tr",align:"left"},"Name"),Object(m.mdx)("th",{parentName:"tr",align:"left"},"Type"))),Object(m.mdx)("tbody",{parentName:"table"},Object(m.mdx)("tr",{parentName:"tbody"},Object(m.mdx)("td",{parentName:"tr",align:"left"},Object(m.mdx)("inlineCode",{parentName:"td"},"transaction")),Object(m.mdx)("td",{parentName:"tr",align:"left"},"Transaction")))),Object(m.mdx)("p",null,Object(m.mdx)("strong",{parentName:"p"},"Returns:")," ",Object(m.mdx)("em",{parentName:"p"},"string")),Object(m.mdx)("p",null,"Defined in: ren-js/packages/lib/interfaces/build/main/chain.d.ts:98"),Object(m.mdx)("hr",null),Object(m.mdx)("h3",{id:"transactionrpcformat"},"transactionRPCFormat"),Object(m.mdx)("p",null,"\u2022 ",Object(m.mdx)("strong",{parentName:"p"},"transactionRPCFormat"),": (",Object(m.mdx)("inlineCode",{parentName:"p"},"transaction"),": Transaction, ",Object(m.mdx)("inlineCode",{parentName:"p"},"v2?"),": ",Object(m.mdx)("em",{parentName:"p"},"boolean"),") => { ",Object(m.mdx)("inlineCode",{parentName:"p"},"txid"),": ",Object(m.mdx)("em",{parentName:"p"},"Buffer")," ; ",Object(m.mdx)("inlineCode",{parentName:"p"},"txindex"),": ",Object(m.mdx)("em",{parentName:"p"},"string"),"  }"),Object(m.mdx)("h4",{id:"type-declaration-7"},"Type declaration"),Object(m.mdx)("p",null,"\u25b8 (",Object(m.mdx)("inlineCode",{parentName:"p"},"transaction"),": Transaction, ",Object(m.mdx)("inlineCode",{parentName:"p"},"v2?"),": ",Object(m.mdx)("em",{parentName:"p"},"boolean"),"): ",Object(m.mdx)("em",{parentName:"p"},"object")),Object(m.mdx)("h4",{id:"parameters-7"},"Parameters"),Object(m.mdx)("table",null,Object(m.mdx)("thead",{parentName:"table"},Object(m.mdx)("tr",{parentName:"thead"},Object(m.mdx)("th",{parentName:"tr",align:"left"},"Name"),Object(m.mdx)("th",{parentName:"tr",align:"left"},"Type"))),Object(m.mdx)("tbody",{parentName:"table"},Object(m.mdx)("tr",{parentName:"tbody"},Object(m.mdx)("td",{parentName:"tr",align:"left"},Object(m.mdx)("inlineCode",{parentName:"td"},"transaction")),Object(m.mdx)("td",{parentName:"tr",align:"left"},"Transaction")),Object(m.mdx)("tr",{parentName:"tbody"},Object(m.mdx)("td",{parentName:"tr",align:"left"},Object(m.mdx)("inlineCode",{parentName:"td"},"v2?")),Object(m.mdx)("td",{parentName:"tr",align:"left"},Object(m.mdx)("em",{parentName:"td"},"boolean"))))),Object(m.mdx)("p",null,Object(m.mdx)("strong",{parentName:"p"},"Returns:")," ",Object(m.mdx)("em",{parentName:"p"},"object")),Object(m.mdx)("table",null,Object(m.mdx)("thead",{parentName:"table"},Object(m.mdx)("tr",{parentName:"thead"},Object(m.mdx)("th",{parentName:"tr",align:"left"},"Name"),Object(m.mdx)("th",{parentName:"tr",align:"left"},"Type"))),Object(m.mdx)("tbody",{parentName:"table"},Object(m.mdx)("tr",{parentName:"tbody"},Object(m.mdx)("td",{parentName:"tr",align:"left"},Object(m.mdx)("inlineCode",{parentName:"td"},"txid")),Object(m.mdx)("td",{parentName:"tr",align:"left"},Object(m.mdx)("em",{parentName:"td"},"Buffer"))),Object(m.mdx)("tr",{parentName:"tbody"},Object(m.mdx)("td",{parentName:"tr",align:"left"},Object(m.mdx)("inlineCode",{parentName:"td"},"txindex")),Object(m.mdx)("td",{parentName:"tr",align:"left"},Object(m.mdx)("em",{parentName:"td"},"string"))))),Object(m.mdx)("p",null,"Defined in: ren-js/packages/lib/interfaces/build/main/chain.d.ts:114"),Object(m.mdx)("hr",null),Object(m.mdx)("h3",{id:"utils"},"utils"),Object(m.mdx)("p",null,"\u2022 ",Object(m.mdx)("strong",{parentName:"p"},"utils"),": ",Object(m.mdx)("em",{parentName:"p"},"object")),Object(m.mdx)("h4",{id:"type-declaration-8"},"Type declaration"),Object(m.mdx)("table",null,Object(m.mdx)("thead",{parentName:"table"},Object(m.mdx)("tr",{parentName:"thead"},Object(m.mdx)("th",{parentName:"tr",align:"left"},"Name"),Object(m.mdx)("th",{parentName:"tr",align:"left"},"Type"),Object(m.mdx)("th",{parentName:"tr",align:"left"},"Description"))),Object(m.mdx)("tbody",{parentName:"table"},Object(m.mdx)("tr",{parentName:"tbody"},Object(m.mdx)("td",{parentName:"tr",align:"left"},Object(m.mdx)("inlineCode",{parentName:"td"},"addressExplorerLink?")),Object(m.mdx)("td",{parentName:"tr",align:"left"},"(",Object(m.mdx)("inlineCode",{parentName:"td"},"address"),": ",Object(m.mdx)("em",{parentName:"td"},"string")," ","|"," Address, ",Object(m.mdx)("inlineCode",{parentName:"td"},"network?"),": ",Object(m.mdx)("a",{parentName:"td",href:"/ren-client-docs/ren-js/api/interfaces/lib_interfaces_build_main_networks.rennetworkdetails"},Object(m.mdx)("em",{parentName:"a"},"RenNetworkDetails"))," ","|"," Network ","|"," ",Object(m.mdx)("a",{parentName:"td",href:"/ren-client-docs/ren-js/api/enums/lib_interfaces_build_main_networks.rennetwork"},Object(m.mdx)("em",{parentName:"a"},"RenNetwork"))," ","|"," ",Object(m.mdx)("a",{parentName:"td",href:"/ren-client-docs/ren-js/api/modules/lib_interfaces_build_main_networks#rennetworkstring"},Object(m.mdx)("em",{parentName:"a"},"RenNetworkString")),", ",Object(m.mdx)("inlineCode",{parentName:"td"},"explorer?"),": ",Object(m.mdx)("em",{parentName:"td"},"string"),") => ",Object(m.mdx)("em",{parentName:"td"},"undefined")," ","|"," ",Object(m.mdx)("em",{parentName:"td"},"string")),Object(m.mdx)("td",{parentName:"tr",align:"left"},Object(m.mdx)("inlineCode",{parentName:"td"},"addressExplorerLink")," should return a URL that can be shown to a user to access more information about an address.  ",Object(m.mdx)("inlineCode",{parentName:"td"},"explorer")," can be provided to request a link to a different explorer. It's up to the chain implementation to choose how to interpret this.")),Object(m.mdx)("tr",{parentName:"tbody"},Object(m.mdx)("td",{parentName:"tr",align:"left"},Object(m.mdx)("inlineCode",{parentName:"td"},"transactionExplorerLink?")),Object(m.mdx)("td",{parentName:"tr",align:"left"},"(",Object(m.mdx)("inlineCode",{parentName:"td"},"transaction"),": ",Object(m.mdx)("em",{parentName:"td"},"string")," ","|"," Transaction, ",Object(m.mdx)("inlineCode",{parentName:"td"},"network?"),": ",Object(m.mdx)("a",{parentName:"td",href:"/ren-client-docs/ren-js/api/interfaces/lib_interfaces_build_main_networks.rennetworkdetails"},Object(m.mdx)("em",{parentName:"a"},"RenNetworkDetails"))," ","|"," Network ","|"," ",Object(m.mdx)("a",{parentName:"td",href:"/ren-client-docs/ren-js/api/enums/lib_interfaces_build_main_networks.rennetwork"},Object(m.mdx)("em",{parentName:"a"},"RenNetwork"))," ","|"," ",Object(m.mdx)("a",{parentName:"td",href:"/ren-client-docs/ren-js/api/modules/lib_interfaces_build_main_networks#rennetworkstring"},Object(m.mdx)("em",{parentName:"a"},"RenNetworkString")),", ",Object(m.mdx)("inlineCode",{parentName:"td"},"explorer?"),": ",Object(m.mdx)("em",{parentName:"td"},"string"),") => ",Object(m.mdx)("em",{parentName:"td"},"undefined")," ","|"," ",Object(m.mdx)("em",{parentName:"td"},"string")),Object(m.mdx)("td",{parentName:"tr",align:"left"},Object(m.mdx)("inlineCode",{parentName:"td"},"transactionExplorerLink")," should return a URL that can be shown to a user to access more information about a transaction.  ",Object(m.mdx)("inlineCode",{parentName:"td"},"explorer")," can be provided to request a link to a different explorer. It's up to the chain implementation to choose how to interpret this.")),Object(m.mdx)("tr",{parentName:"tbody"},Object(m.mdx)("td",{parentName:"tr",align:"left"},Object(m.mdx)("inlineCode",{parentName:"td"},"addressIsValid")),Object(m.mdx)("td",{parentName:"tr",align:"left"},"(",Object(m.mdx)("inlineCode",{parentName:"td"},"address"),": ",Object(m.mdx)("em",{parentName:"td"},"string")," ","|"," Address, ",Object(m.mdx)("inlineCode",{parentName:"td"},"network?"),": ",Object(m.mdx)("a",{parentName:"td",href:"/ren-client-docs/ren-js/api/interfaces/lib_interfaces_build_main_networks.rennetworkdetails"},Object(m.mdx)("em",{parentName:"a"},"RenNetworkDetails"))," ","|"," Network ","|"," ",Object(m.mdx)("a",{parentName:"td",href:"/ren-client-docs/ren-js/api/enums/lib_interfaces_build_main_networks.rennetwork"},Object(m.mdx)("em",{parentName:"a"},"RenNetwork"))," ","|"," ",Object(m.mdx)("a",{parentName:"td",href:"/ren-client-docs/ren-js/api/modules/lib_interfaces_build_main_networks#rennetworkstring"},Object(m.mdx)("em",{parentName:"a"},"RenNetworkString")),") => ",Object(m.mdx)("em",{parentName:"td"},"boolean")),Object(m.mdx)("td",{parentName:"tr",align:"left"},"-")),Object(m.mdx)("tr",{parentName:"tbody"},Object(m.mdx)("td",{parentName:"tr",align:"left"},Object(m.mdx)("inlineCode",{parentName:"td"},"resolveChainNetwork")),Object(m.mdx)("td",{parentName:"tr",align:"left"},"(",Object(m.mdx)("inlineCode",{parentName:"td"},"network"),": ",Object(m.mdx)("a",{parentName:"td",href:"/ren-client-docs/ren-js/api/interfaces/lib_interfaces_build_main_networks.rennetworkdetails"},Object(m.mdx)("em",{parentName:"a"},"RenNetworkDetails"))," ","|"," Network ","|"," ",Object(m.mdx)("a",{parentName:"td",href:"/ren-client-docs/ren-js/api/enums/lib_interfaces_build_main_networks.rennetwork"},Object(m.mdx)("em",{parentName:"a"},"RenNetwork"))," ","|"," ",Object(m.mdx)("a",{parentName:"td",href:"/ren-client-docs/ren-js/api/modules/lib_interfaces_build_main_networks#rennetworkstring"},Object(m.mdx)("em",{parentName:"a"},"RenNetworkString")),") => Network"),Object(m.mdx)("td",{parentName:"tr",align:"left"},"-")))),Object(m.mdx)("p",null,"Inherited from: ",Object(m.mdx)("a",{parentName:"p",href:"/ren-client-docs/ren-js/api/interfaces/lib_interfaces_build_main_chain.chainstatic"},"ChainStatic"),".",Object(m.mdx)("a",{parentName:"p",href:"/ren-client-docs/ren-js/api/interfaces/lib_interfaces_build_main_chain.chainstatic#utils"},"utils")),Object(m.mdx)("p",null,"Defined in: ren-js/packages/lib/interfaces/build/main/chain.d.ts:228"),Object(m.mdx)("hr",null),Object(m.mdx)("h3",{id:"withprovider"},"withProvider"),Object(m.mdx)("p",null,"\u2022 ",Object(m.mdx)("inlineCode",{parentName:"p"},"Optional")," ",Object(m.mdx)("strong",{parentName:"p"},"withProvider"),": (...",Object(m.mdx)("inlineCode",{parentName:"p"},"args"),": ",Object(m.mdx)("em",{parentName:"p"},"any"),"[]) => ",Object(m.mdx)("a",{parentName:"p",href:"/ren-client-docs/ren-js/api/modules/lib_interfaces_build_main_chain#syncorpromise"},Object(m.mdx)("em",{parentName:"a"},"SyncOrPromise")),"<",Object(m.mdx)("a",{parentName:"p",href:"/ren-client-docs/ren-js/api/interfaces/lib_interfaces_build_main_chain.chaincommon"},Object(m.mdx)("em",{parentName:"a"},"ChainCommon")),"<Transaction, Address, Network",">",">"),Object(m.mdx)("h4",{id:"type-declaration-9"},"Type declaration"),Object(m.mdx)("p",null,"\u25b8 (...",Object(m.mdx)("inlineCode",{parentName:"p"},"args"),": ",Object(m.mdx)("em",{parentName:"p"},"any"),"[]): ",Object(m.mdx)("a",{parentName:"p",href:"/ren-client-docs/ren-js/api/modules/lib_interfaces_build_main_chain#syncorpromise"},Object(m.mdx)("em",{parentName:"a"},"SyncOrPromise")),"<",Object(m.mdx)("a",{parentName:"p",href:"/ren-client-docs/ren-js/api/interfaces/lib_interfaces_build_main_chain.chaincommon"},Object(m.mdx)("em",{parentName:"a"},"ChainCommon")),"<Transaction, Address, Network",">",">"),Object(m.mdx)("h4",{id:"parameters-8"},"Parameters"),Object(m.mdx)("table",null,Object(m.mdx)("thead",{parentName:"table"},Object(m.mdx)("tr",{parentName:"thead"},Object(m.mdx)("th",{parentName:"tr",align:"left"},"Name"),Object(m.mdx)("th",{parentName:"tr",align:"left"},"Type"))),Object(m.mdx)("tbody",{parentName:"table"},Object(m.mdx)("tr",{parentName:"tbody"},Object(m.mdx)("td",{parentName:"tr",align:"left"},Object(m.mdx)("inlineCode",{parentName:"td"},"...args")),Object(m.mdx)("td",{parentName:"tr",align:"left"},Object(m.mdx)("em",{parentName:"td"},"any"),"[]")))),Object(m.mdx)("p",null,Object(m.mdx)("strong",{parentName:"p"},"Returns:")," ",Object(m.mdx)("a",{parentName:"p",href:"/ren-client-docs/ren-js/api/modules/lib_interfaces_build_main_chain#syncorpromise"},Object(m.mdx)("em",{parentName:"a"},"SyncOrPromise")),"<",Object(m.mdx)("a",{parentName:"p",href:"/ren-client-docs/ren-js/api/interfaces/lib_interfaces_build_main_chain.chaincommon"},Object(m.mdx)("em",{parentName:"a"},"ChainCommon")),"<Transaction, Address, Network",">",">"),Object(m.mdx)("p",null,"Defined in: ren-js/packages/lib/interfaces/build/main/chain.d.ts:61"))}p.isMDXComponent=!0},498:function(e,t,n){"use strict";n.r(t),n.d(t,"MDXContext",(function(){return p})),n.d(t,"MDXProvider",(function(){return b})),n.d(t,"mdx",(function(){return x})),n.d(t,"useMDXComponents",(function(){return o})),n.d(t,"withMDXComponents",(function(){return s}));var a=n(0),r=n.n(a);function m(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function d(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?d(Object(n),!0).forEach((function(t){m(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):d(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},m=Object.keys(e);for(a=0;a<m.length;a++)n=m[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var m=Object.getOwnPropertySymbols(e);for(a=0;a<m.length;a++)n=m[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=r.a.createContext({}),s=function(e){return function(t){var n=o(t.components);return r.a.createElement(e,i({},t,{components:n}))}},o=function(e){var t=r.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},b=function(e){var t=o(e.components);return r.a.createElement(p.Provider,{value:t},e.children)},j={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},O=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,m=e.originalType,i=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=o(n),s=a,b=p["".concat(i,".").concat(s)]||p[s]||j[s]||m;return n?r.a.createElement(b,c(c({ref:t},d),{},{components:n})):r.a.createElement(b,c({ref:t},d))}));function x(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var m=n.length,i=new Array(m);i[0]=O;var d={};for(var c in t)hasOwnProperty.call(t,c)&&(d[c]=t[c]);d.originalType=e,d.mdxType="string"==typeof e?e:a,i[1]=d;for(var l=2;l<m;l++)i[l]=n[l];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}O.displayName="MDXCreateElement"}}]);