"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[650],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return h}});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=l(r),h=a,d=m["".concat(c,".").concat(h)]||m[h]||u[h]||o;return r?n.createElement(d,i(i({ref:t},p),{},{components:r})):n.createElement(d,i({ref:t},p))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},55138:function(e,t,r){r.r(t),r.d(t,{contentTitle:function(){return p},default:function(){return d},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return m}});var n=r(87462),a=r(63366),o=(r(67294),r(3905)),i=r(69324),s=r(93454),c=["components"],l={title:"Ethereum"},p=void 0,u={unversionedId:"v3/reference/chains/ethereum",id:"v3/reference/chains/ethereum",title:"Ethereum",description:"Ethereum (TypeDoc)",source:"@site/ren-js/v3/reference/chains/ethereum.mdx",sourceDirName:"v3/reference/chains",slug:"/v3/reference/chains/ethereum",permalink:"/ren-client-docs/ren-js/v3/reference/chains/ethereum",editUrl:"https://github.com/renproject/ren-client-docs/edit/master/ren-js/v3/reference/chains/ethereum.mdx",tags:[],version:"current",frontMatter:{title:"Ethereum"},sidebar:"docs",previous:{title:"Bitcoin",permalink:"/ren-client-docs/ren-js/v3/reference/chains/bitcoin"},next:{title:"Solana (TODO)",permalink:"/ren-client-docs/ren-js/v3/reference/chains/solana"}},m=[{value:'Ethereum <TypeDoc name="Ethereum">(TypeDoc)</TypeDoc>',id:"ethereum-typedoc",children:[{value:"Payloads",id:"payloads",children:[],level:4}],level:3},{value:"Other chains",id:"other-chains",children:[],level:3}],h={toc:m};function d(e){var t=e.components,r=(0,a.Z)(e,c);return(0,o.kt)("wrapper",(0,n.Z)({},h,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)(s.G,{type:s.e.Reference,mdxType:"DocTag"}),(0,o.kt)("h3",{id:"ethereum-typedoc"},"Ethereum ",(0,o.kt)(i.L,{name:"Ethereum",mdxType:"TypeDoc"},"(TypeDoc)")),(0,o.kt)("p",null,"Initializing the Ethereum class requires:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},'a network - either a Ren network ("mainnet", "testnet" or "devnet"), or a ',(0,o.kt)(i.L,{name:"EVMmNetworkConfig",mdxType:"TypeDoc"}),"."),(0,o.kt)("li",{parentName:"ol"},"a provider - either an ethers provider, a Web3 provider or a string."),(0,o.kt)("li",{parentName:"ol"},"an optional signer - an ethers signer. If no signer is provided, the provider's signer will be used if available, or it can be provided later with ",(0,o.kt)("inlineCode",{parentName:"li"},".withSigner"),".")),(0,o.kt)("p",null,"Examples of initializing:"),(0,o.kt)("details",null,(0,o.kt)("summary",null,"MetaMask or other web3 browser"),(0,o.kt)("p",null,"After calling ",(0,o.kt)("inlineCode",{parentName:"p"},"eth_requestAccounts"),", you can then pass ",(0,o.kt)("inlineCode",{parentName:"p"},"window.ethereum")," directly to the Ethereum class:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'await window.ethereum.request({ method: "eth_requestAccounts" });\n\nnew Ethereum({\n    network: "testnet",\n    provider: window.ethereum,\n});\n')),(0,o.kt)("p",null,"If you are using TypeScript, you can add this anywhere in your code to avoid getting an type error when accessing ",(0,o.kt)("inlineCode",{parentName:"p"},"window.ethereum"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"declare global {\n    interface Window {\n        ethereum: any;\n    }\n}\n")),(0,o.kt)("p",null,"Because the Ethereum constructor is synchronous, it won't immediately check that the provider is connected to the right network. In a front-end dApp, you should check the network by doing:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const { chainId } = await provider.getNetwork();\nif (chainId !== parseInt(ethereum.network.network.chainId)) {\n    throw new Error(\n        `Wrong network - please change to ${ethereum.network.network.chainName}`\n    );\n}\n"))),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Public endpoint with MetaMask signer"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'new Ethereum({\n    network: "mainnet",\n    provider: "https://cloudflare-eth.com",\n});\n\nawait window.ethereum.request({ method: "eth_requestAccounts" });\nconst web3Provider = new ethers.providers.Web3Provider(\n    (window as any).ethereum\n);\nchain.withSigner(web3Provider.getSigner());\n'))),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Public endpoint with private key signer"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { Wallet } from "ethers";\n\nnew Ethereum({\n    network: "mainnet",\n    provider: "https://cloudflare-eth.com",\n    signer: Wallet.fromMnemonic(\n        "apple bank cargo ...",\n    );\n});\n'))),(0,o.kt)("h4",{id:"payloads"},"Payloads"),(0,o.kt)("p",null,"The available input payloads are:"),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Address or Account"),(0,o.kt)(i.L,{name:"Ethereum.Account",mdxType:"TypeDoc"},"ethereum.Account")," allows you to specify the user's connected address as the recipient for a mint or release, or as the origin of assets to be burnt or locked.",(0,o.kt)("br",null),(0,o.kt)("p",null,"Destination:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'renJS.gateway({\n    asset: "BTC",\n    ...\n    to: ethereum.Account(),\n})\n')),(0,o.kt)("p",null,"Origin:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'renJS.gateway({\n    asset: "BTC",\n    from: ethereum.Account({ amount: "0.1", convertUnit: true }),\n    ...\n})\n')),(0,o.kt)(i.L,{name:"Ethereum.Address",mdxType:"TypeDoc"},"ethereum.Address")," allows you to specify an Ethereum address for receiving the minted/released funds.",(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'renJS.gateway({\n    asset: "BTC",\n    ...\n    to: ethereum.Address(),\n})\n'))),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Transaction"),(0,o.kt)(i.L,{name:"Ethereum.Transaction",mdxType:"TypeDoc"},"ethereum.Transaction")," allows you to specify a specific Ethereum transaction, instead of watching for deposits to the gateway address. Note that the recipient address of the transaction should still match the gateway address generated from the to-chain's parameters.",(0,o.kt)("p",null,"The transaction should be of type ",(0,o.kt)("code",null,"Partial<",(0,o.kt)(i.L,{name:"ChainTransaction",mdxType:"TypeDoc"}),">"),", with at least one of the ",(0,o.kt)("inlineCode",{parentName:"p"},"txid")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"txidFormatted")," is defined."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'renJS.gateway({\n    asset: "BTC",\n    from: ethereum.Transaction({\n      // The transaction\'s hash in the usual Ethereum hex encoding.\n      txidFormatted: "a1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d",\n      // The transaction\'s hash in URL-base64 encoding.\n      txid: "oQddtV1BbTyhmfVbYITiEVuTReFsXPMC_IDp1fv11I0",\n      // The vOut/txindex of the specific transaction ouput.\n      txindex: "0"\n    }),\n    ...\n})\n'))),(0,o.kt)("p",null,"The available output payloads are:"),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Address"),(0,o.kt)(i.L,{name:"Ethereum.Address",mdxType:"TypeDoc"},"ethereum.Address")," allows you to specify the Ethereum address for receiving the released BTC.",(0,o.kt)("br",null),(0,o.kt)("br",null),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'renJS.gateway({\n    asset: "BTC",\n    from: ethereum.Address("miMi2VET41YV1j6SDNTeZoPBbmH8B4nEx6"),\n    ...\n})\n'))),(0,o.kt)("h3",{id:"other-chains"},"Other chains"),(0,o.kt)("p",null,"A list of other chains that implement this same interface are:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)(i.L,{name:"EthereumCash",mdxType:"TypeDoc"})),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)(i.L,{name:"Zcash",mdxType:"TypeDoc"})),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)(i.L,{name:"Dogecoin",mdxType:"TypeDoc"})),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)(i.L,{name:"DigiByte",mdxType:"TypeDoc"})),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)(i.L,{name:"Terra",mdxType:"TypeDoc"})),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)(i.L,{name:"Filecoin",mdxType:"TypeDoc"}))))}d.isMDXComponent=!0},93454:function(e,t,r){r.d(t,{G:function(){return s},e:function(){return a}});var n,a,o=r(67294);!function(e){e.Tutorial="Tutorial",e.HowTo="How To",e.Reference="Reference",e.Explanation="Explanation"}(a||(a={}));var i=((n={})[a.Tutorial]="#b48ead",n[a.HowTo]="#69a8b9",n[a.Reference]="#bf616a",n[a.Explanation]="#d2b06c",n),s=function(e){var t=e.type,r=e.marginBottom;return o.createElement(o.Fragment,null,o.createElement("span",{style:{border:"2px solid "+i[t]||0,borderRadius:"5px",color:i[t]||"orange",padding:"0.1rem 0.4rem",marginBottom:void 0!==r?r:30,display:"inline-block"}},String(t)))}},69324:function(e,t,r){r.d(t,{L:function(){return o}});var n=r(67294),a={Asset:"enums/_renproject_chains.Asset.html",Chain:"enums/_renproject_chains.Chain.html",RPCMethod:"enums/_renproject_provider.RPCMethod.html",ChainTransactionStatus:"enums/_renproject_utils.ChainTransactionStatus.html",InputType:"enums/_renproject_utils.InputType.html",LogLevel:"enums/_renproject_utils.LogLevel.html",OutputType:"enums/_renproject_utils.OutputType.html",PackPrimitive:"enums/_renproject_utils.PackPrimitive.html",RenJSError:"enums/_renproject_utils.RenJSError.html",RenNetwork:"enums/_renproject_utils.RenNetwork.html",TxStatus:"enums/_renproject_utils.TxStatus.html",Bitcoin:"classes/_renproject_chains_bitcoin.Bitcoin.html",BitcoinBaseChain:"classes/_renproject_chains_bitcoin.BitcoinBaseChain.html",BitcoinCash:"classes/_renproject_chains_bitcoin.BitcoinCash.html",DigiByte:"classes/_renproject_chains_bitcoin.DigiByte.html",Dogecoin:"classes/_renproject_chains_bitcoin.Dogecoin.html",Zcash:"classes/_renproject_chains_bitcoin.Zcash.html",Arbitrum:"classes/_renproject_chains_ethereum.Arbitrum.html",Avalanche:"classes/_renproject_chains_ethereum.Avalanche.html",BinanceSmartChain:"classes/_renproject_chains_ethereum.BinanceSmartChain.html",Ethereum:"classes/_renproject_chains_ethereum.Ethereum.html",Fantom:"classes/_renproject_chains_ethereum.Fantom.html",Goerli:"classes/_renproject_chains_ethereum.Goerli.html",Polygon:"classes/_renproject_chains_ethereum.Polygon.html",Filecoin:"classes/_renproject_chains_filecoin.Filecoin.html",Solana:"classes/_renproject_chains_solana.Solana.html",Terra:"classes/_renproject_chains_terra.Terra.html",MockChain:"classes/_renproject_mock_provider.MockChain.html",MockProvider:"classes/_renproject_mock_provider.MockProvider.html",RenVMProvider:"classes/_renproject_provider.RenVMProvider.html",Gateway:"classes/_renproject_ren.Gateway.html",GatewayTransaction:"classes/_renproject_ren.GatewayTransaction.html",RenJS:"classes/_renproject_ren.RenJS.html",RenVMTxSubmitter:"classes/_renproject_ren.RenVMTxSubmitter.html",DefaultTxWaiter:"classes/_renproject_utils.DefaultTxWaiter.html",ErrorWithCode:"classes/_renproject_utils.ErrorWithCode.html",EventEmitterTyped:"classes/_renproject_utils.EventEmitterTyped.html",TxWaiterProxy:"classes/_renproject_utils.TxWaiterProxy.html",BitcoinNetworkConfig:"interfaces/_renproject_chains_bitcoin.BitcoinNetworkConfig.html",BitcoinOutputPayload:"interfaces/_renproject_chains_bitcoin.BitcoinOutputPayload.html",EthereumClassConfig:"interfaces/_renproject_chains_ethereum.EthereumClassConfig.html",EvmNetworkConfig:"interfaces/_renproject_chains_ethereum.EvmNetworkConfig.html",FilecoinNetworkConfig:"interfaces/_renproject_chains_filecoin.FilecoinNetworkConfig.html",FilecoinOutputPayload:"interfaces/_renproject_chains_filecoin.FilecoinOutputPayload.html",SolanaPayloadInterface:"interfaces/_renproject_chains_solana.SolanaPayloadInterface.html",TerraOutputPayload:"interfaces/_renproject_chains_terra.TerraOutputPayload.html",BlockState:"interfaces/_renproject_provider.BlockState.html",MarshalledRenVMBlock:"interfaces/_renproject_provider.MarshalledRenVMBlock.html",ParamsQueryBlock:"interfaces/_renproject_provider.ParamsQueryBlock.html",ParamsQueryBlockState:"interfaces/_renproject_provider.ParamsQueryBlockState.html",ParamsQueryBlocks:"interfaces/_renproject_provider.ParamsQueryBlocks.html",ParamsQueryConfig:"interfaces/_renproject_provider.ParamsQueryConfig.html",ParamsQueryTx:"interfaces/_renproject_provider.ParamsQueryTx.html",ParamsQueryTxs:"interfaces/_renproject_provider.ParamsQueryTxs.html",ParamsSubmitTx:"interfaces/_renproject_provider.ParamsSubmitTx.html",RenVMBlock:"interfaces/_renproject_provider.RenVMBlock.html",RenVMProviderInterface:"interfaces/_renproject_provider.RenVMProviderInterface.html",RenVMTransaction:"interfaces/_renproject_provider.RenVMTransaction.html",RenVMTransactionWithStatus:"interfaces/_renproject_provider.RenVMTransactionWithStatus.html",ResponseQueryBlock:"interfaces/_renproject_provider.ResponseQueryBlock.html",ResponseQueryBlockState:"interfaces/_renproject_provider.ResponseQueryBlockState.html",ResponseQueryBlocks:"interfaces/_renproject_provider.ResponseQueryBlocks.html",ResponseQueryConfig:"interfaces/_renproject_provider.ResponseQueryConfig.html",ResponseQueryTx:"interfaces/_renproject_provider.ResponseQueryTx.html",ResponseQueryTxs:"interfaces/_renproject_provider.ResponseQueryTxs.html",ResponseSubmitGateway:"interfaces/_renproject_provider.ResponseSubmitGateway.html",ResponseSubmitTx:"interfaces/_renproject_provider.ResponseSubmitTx.html",SubmitGatewayInput:"interfaces/_renproject_provider.SubmitGatewayInput.html",TransactionInput:"interfaces/_renproject_provider.TransactionInput.html",TransactionOutput:"interfaces/_renproject_provider.TransactionOutput.html",GatewayFees:"interfaces/_renproject_ren.GatewayFees.html",ChainCommon:"interfaces/_renproject_utils.ChainCommon.html",ChainTransaction:"interfaces/_renproject_utils.ChainTransaction.html",ChainTransactionProgress:"interfaces/_renproject_utils.ChainTransactionProgress.html",ContractChain:"interfaces/_renproject_utils.ContractChain.html",DepositChain:"interfaces/_renproject_utils.DepositChain.html",InputChainTransaction:"interfaces/_renproject_utils.InputChainTransaction.html",Logger:"interfaces/_renproject_utils.Logger.html",PackListType:"interfaces/_renproject_utils.PackListType.html",PackStructType:"interfaces/_renproject_utils.PackStructType.html",RenVMShard:"interfaces/_renproject_utils.RenVMShard.html",TxSubmitter:"interfaces/_renproject_utils.TxSubmitter.html",TxWaiter:"interfaces/_renproject_utils.TxWaiter.html",TypedPackValue:"interfaces/_renproject_utils.TypedPackValue.html"},o=function(e){var t=e.name,r=e.children,o=t.split("."),i=o[0],s=o[1];return n.createElement("a",{target:"_blank",rel:"noopener noreferrer",href:"https://renproject.github.io/ren-js-v3-docs/"+a[i]+(s?"#"+s:"")},r||t,a[i]?null:n.createElement("span",{style:{color:"#bf616a"}}," (Link not found)"))}}}]);