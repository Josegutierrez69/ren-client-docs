(window.webpackJsonp=window.webpackJsonp||[]).push([[277],{310:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return d})),n.d(t,"default",(function(){return l}));var r=n(3),a=(n(0),n(413));const o={title:"Summary of contracts"},c={unversionedId:"summary",id:"summary",isDocsHomePage:!1,title:"Summary of contracts",description:"Darknode contracts (Ethereum-only)",source:"@site/contracts/summary.mdx",slug:"/summary",permalink:"/ren-client-docs/contracts/summary",editUrl:"https://github.com/renproject/ren-client-docs/edit/master/contracts/summary.mdx",version:"current",sidebar:"contracts",previous:{title:"Deployments",permalink:"/ren-client-docs/contracts/deployments"},next:{title:"Previous Upgrades",permalink:"/ren-client-docs/contracts/upgrades"}},d=[{value:"Darknode contracts (Ethereum-only)",id:"darknode-contracts-ethereum-only",children:[{value:"<code>RenToken</code>",id:"rentoken",children:[]},{value:"<code>DarknodeRegistry</code> and <code>DarknodeRegistryStore</code>",id:"darknoderegistry-and-darknoderegistrystore",children:[]},{value:"<code>DarknodePayment</code> and <code>DarknodePaymentStore</code> LEGACY",id:"darknodepayment-and-darknodepaymentstore-legacy",children:[]},{value:"<code>Protocol</code>",id:"protocol",children:[]}]},{value:"EVM Gateway contracts",id:"evm-gateway-contracts",children:[{value:"<code>RenERC20</code>",id:"renerc20",children:[]},{value:"<code>MintGateway</code>",id:"mintgateway",children:[]},{value:"<code>GatewayRegistry</code>",id:"gatewayregistry",children:[]},{value:"<code>BasicAdapter</code>",id:"basicadapter",children:[]}]}],i={toc:d};function l({components:e,...t}){return Object(a.mdx)("wrapper",Object(r.default)({},i,t,{components:e,mdxType:"MDXLayout"}),Object(a.mdx)("h2",{id:"darknode-contracts-ethereum-only"},"Darknode contracts (Ethereum-only)"),Object(a.mdx)("p",null,"The darknode contracts include the following contracts:"),Object(a.mdx)("h3",{id:"rentoken"},Object(a.mdx)("inlineCode",{parentName:"h3"},"RenToken")),Object(a.mdx)("p",null,"This is the ERC20 contract for the REN token."),Object(a.mdx)("h3",{id:"darknoderegistry-and-darknoderegistrystore"},Object(a.mdx)("inlineCode",{parentName:"h3"},"DarknodeRegistry")," and ",Object(a.mdx)("inlineCode",{parentName:"h3"},"DarknodeRegistryStore")),Object(a.mdx)("p",null,"These contracts are responsible for managing the registration and bonding of darknodes."),Object(a.mdx)("p",null,"The ",Object(a.mdx)("inlineCode",{parentName:"p"},"DarknodeRegistry")," handles the logic of registering, while the ",Object(a.mdx)("inlineCode",{parentName:"p"},"DarknodeRegistryStore")," stores the REN used for bonds."),Object(a.mdx)("h3",{id:"darknodepayment-and-darknodepaymentstore-legacy"},Object(a.mdx)("inlineCode",{parentName:"h3"},"DarknodePayment")," and ",Object(a.mdx)("inlineCode",{parentName:"h3"},"DarknodePaymentStore")," ","[LEGACY]"),Object(a.mdx)("p",null,"Minting and burning fees were previously subtracted on Ethereum, and then forwarded to the ",Object(a.mdx)("inlineCode",{parentName:"p"},"DarknodePayment")," contract."),Object(a.mdx)("p",null,"Fees are now collected in RenVM instead, but darknode operators can still withdraw legacy rewards from the ",Object(a.mdx)("inlineCode",{parentName:"p"},"DarknodePayment")," contract through the Command Center."),Object(a.mdx)("h3",{id:"protocol"},Object(a.mdx)("inlineCode",{parentName:"h3"},"Protocol")),Object(a.mdx)("p",null,"The ",Object(a.mdx)("inlineCode",{parentName:"p"},"Protocol")," contract tracks the addresses of all of the other contracts."),Object(a.mdx)("br",null),Object(a.mdx)("h2",{id:"evm-gateway-contracts"},"EVM Gateway contracts"),Object(a.mdx)("h3",{id:"renerc20"},Object(a.mdx)("inlineCode",{parentName:"h3"},"RenERC20")),Object(a.mdx)("p",null,"Each ren-asset (e.g. renBTC, renDOGE, etc.) is represented on EVM-compatible chains (Ethereum, BSC, etc.) by an ERC20 contract."),Object(a.mdx)("h3",{id:"mintgateway"},Object(a.mdx)("inlineCode",{parentName:"h3"},"MintGateway")),Object(a.mdx)("p",null,"Each ",Object(a.mdx)("inlineCode",{parentName:"p"},"RenERC20")," has an associated ",Object(a.mdx)("inlineCode",{parentName:"p"},"MintGateway")," contract which is responsible for minting and burning the ren-asset. It handles verifying the RenVM signature, and emitting burn events which are watched by RenVM."),Object(a.mdx)("p",null,"A future upgrade will unify all ",Object(a.mdx)("inlineCode",{parentName:"p"},"MintGateway"),"s into a single contract that manages all ",Object(a.mdx)("inlineCode",{parentName:"p"},"RenERC20")," contracts."),Object(a.mdx)("h3",{id:"gatewayregistry"},Object(a.mdx)("inlineCode",{parentName:"h3"},"GatewayRegistry")),Object(a.mdx)("p",null,"Each EVM-compatible chain has a ",Object(a.mdx)("inlineCode",{parentName:"p"},"GatewayRegistry")," which can be used to look-up the ",Object(a.mdx)("inlineCode",{parentName:"p"},"MintGateway")," and ",Object(a.mdx)("inlineCode",{parentName:"p"},"RenERC20")," contract addresses from a symbol."),Object(a.mdx)("p",null,"A future upgrade will replace the ",Object(a.mdx)("inlineCode",{parentName:"p"},"GatewayRegistry")," with a ",Object(a.mdx)("inlineCode",{parentName:"p"},"RenERC20Factory")," which will also be responsible for deploying new ",Object(a.mdx)("inlineCode",{parentName:"p"},"RenERC20"),"s."),Object(a.mdx)("h3",{id:"basicadapter"},Object(a.mdx)("inlineCode",{parentName:"h3"},"BasicAdapter")),Object(a.mdx)("p",null,"The ",Object(a.mdx)("inlineCode",{parentName:"p"},"BasicAdapter")," contract is not part of the core RenVM protocol contracts, and is only used by the front-end RenJS library. It's a contract that submits mint signatures to a ",Object(a.mdx)("inlineCode",{parentName:"p"},"MintGateway")," and then forwards the minted ren-asset to the specified recipient."),Object(a.mdx)("br",null),Object(a.mdx)("br",null),Object(a.mdx)("br",null))}l.isMDXComponent=!0},413:function(e,t,n){"use strict";n.r(t),n.d(t,"MDXContext",(function(){return s})),n.d(t,"MDXProvider",(function(){return u})),n.d(t,"mdx",(function(){return h})),n.d(t,"useMDXComponents",(function(){return p})),n.d(t,"withMDXComponents",(function(){return m}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(){return(c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function d(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?d(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):d(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=a.a.createContext({}),m=function(e){return function(t){var n=p(t.components);return a.a.createElement(e,c({},t,{components:n}))}},p=function(e){var t=a.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return a.a.createElement(s.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},y=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),s=p(n),m=r,u=s["".concat(c,".").concat(m)]||s[m]||b[m]||o;return n?a.a.createElement(u,i(i({ref:t},d),{},{components:n})):a.a.createElement(u,i({ref:t},d))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,c=new Array(o);c[0]=y;var d={};for(var i in t)hasOwnProperty.call(t,i)&&(d[i]=t[i]);d.originalType=e,d.mdxType="string"==typeof e?e:r,c[1]=d;for(var l=2;l<o;l++)c[l]=n[l];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,n)}y.displayName="MDXCreateElement"}}]);