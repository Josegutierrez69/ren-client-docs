(window.webpackJsonp=window.webpackJsonp||[]).push([[279],{312:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return m})),n.d(t,"metadata",(function(){return p})),n.d(t,"toc",(function(){return u})),n.d(t,"default",(function(){return b}));var a=n(3),r=n(9),o=(n(0),n(415)),i=n(451),s=n.n(i),c=n(458),d=n.n(c),l=n(416),m={title:"3. RenJS",slug:"ren-js"},p={unversionedId:"tutorial/3-ren-js",id:"tutorial/3-ren-js",isDocsHomePage:!1,title:"3. RenJS",description:"RenJS allows developers to hook in to RenVM's growing network of bridged chains and assets. It's the official JavaScript SDK for interacting with RenVM and for bridging assets.",source:"@site/ren-js/tutorial/3-ren-js.mdx",slug:"/tutorial/ren-js",permalink:"/ren-client-docs/ren-js/tutorial/ren-js",editUrl:"https://github.com/renproject/ren-client-docs/edit/master/ren-js/tutorial/3-ren-js.mdx",version:"current",sidebar:"docs",previous:{title:"2. React UI",permalink:"/ren-client-docs/ren-js/tutorial/react-ui"},next:{title:"Things to note",permalink:"/ren-client-docs/ren-js/things-to-note"}},u=[{value:"Installing and Initializing RenJS",id:"installing-and-initializing-renjs",children:[]},{value:"Bridging BTC onto Ethereum",id:"bridging-btc-onto-ethereum",children:[]},{value:"Bridging BTC back from Ethereum",id:"bridging-btc-back-from-ethereum",children:[]},{value:"Complete App.js",id:"complete-appjs",children:[]},{value:"Testing it",id:"testing-it",children:[]}],h={toc:u};function b(e){var t=e.components,i=Object(r.default)(e,["components"]);return Object(o.mdx)("wrapper",Object(a.default)({},h,i,{components:t,mdxType:"MDXLayout"}),Object(o.mdx)(l.DocTag,{type:l.DocType.Tutorial,mdxType:"DocTag"}),Object(o.mdx)("p",null,"RenJS allows developers to hook in to RenVM's growing network of bridged chains and assets. It's the official JavaScript SDK for interacting with RenVM and for bridging assets."),Object(o.mdx)("h3",{id:"installing-and-initializing-renjs"},"Installing and Initializing RenJS"),Object(o.mdx)("p",null,"There are two packages that need to be installed:"),Object(o.mdx)("ul",null,Object(o.mdx)("li",{parentName:"ul"},Object(o.mdx)("inlineCode",{parentName:"li"},"@renproject/ren")," implements the core logic for interacting with RenVM"),Object(o.mdx)("li",{parentName:"ul"},Object(o.mdx)("inlineCode",{parentName:"li"},"@renproject/chains")," provides support for various assets and chains. These can also be imported separately - e.g. using ",Object(o.mdx)("inlineCode",{parentName:"li"},"@renproject/chains-ethereum")," for Ethereum.")),Object(o.mdx)(s.a,{defaultValue:"npm",values:[{label:"npm",value:"npm"},{label:"yarn",value:"yarn"}],mdxType:"Tabs"},Object(o.mdx)(d.a,{value:"npm",mdxType:"TabItem"},Object(o.mdx)("pre",null,Object(o.mdx)("code",{parentName:"pre",className:"language-bash"},"npm install --save @renproject/ren @renproject/chains\n"))),Object(o.mdx)(d.a,{value:"yarn",mdxType:"TabItem"},Object(o.mdx)("pre",null,Object(o.mdx)("code",{parentName:"pre",className:"language-bash"},"yarn add @renproject/ren @renproject/chains\n")))),Object(o.mdx)("p",null,"Import the packages at the top of ",Object(o.mdx)("inlineCode",{parentName:"p"},"App.js"),":"),Object(o.mdx)("pre",null,Object(o.mdx)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/App.js"',title:'"src/App.js"'},'import RenJS from "@renproject/ren";\nimport { Bitcoin, Ethereum } from "@renproject/chains";\n')),Object(o.mdx)("p",null,"Initialize RenJS, adding it to your ",Object(o.mdx)("inlineCode",{parentName:"p"},"App.js")," state (line ",Object(o.mdx)("inlineCode",{parentName:"p"},"17"),") like so:"),Object(o.mdx)("pre",null,Object(o.mdx)("code",{parentName:"pre",className:"language-js",metastring:"{4}","{4}":!0},'this.state = {\n  balance: 0,\n  message: "",\n  renJS: new RenJS("testnet", { useV2TransactionFormat: true }),\n  error: "",\n};\n')),Object(o.mdx)("p",null,"We initialize it with the parameter ",Object(o.mdx)("inlineCode",{parentName:"p"},'"testnet"')," to connect to RenVM's testnet. Omit this parameter when you are ready to integrate on mainnet."),Object(o.mdx)("h3",{id:"bridging-btc-onto-ethereum"},"Bridging BTC onto Ethereum"),Object(o.mdx)("p",null,"There's two steps involves in creating new renBTC tokens on Ethereum - 1) ",Object(o.mdx)("em",{parentName:"p"},"locking")," BTC and 2) ",Object(o.mdx)("em",{parentName:"p"},"minting")," renBTC. The method on RenJS to initiate this process is ",Object(o.mdx)("inlineCode",{parentName:"p"},"lockAndMint"),"."),Object(o.mdx)("p",null,"Here's what it looks like to set-up a lockAndMint to a user's address on Ethereum:"),Object(o.mdx)("pre",null,Object(o.mdx)("code",{parentName:"pre",className:"language-ts",metastring:'title="Example"',title:'"Example"'},'const { web3, renJS } = this.state;\n\nconst mint = await renJS.lockAndMint({\n  asset: "BTC",\n  from: Bitcoin(),\n  to: Ethereum(web3.currentProvider).Address("0x1234..."),\n});\n')),Object(o.mdx)("p",null,"For our example, we want to send BTC to a smart contract, not just a user's address. To do this, we specify the details needed to call the smart contract. Add this to the body of ",Object(o.mdx)("inlineCode",{parentName:"p"},"deposit"),":"),Object(o.mdx)("pre",null,Object(o.mdx)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/App.js - deposit"',title:'"src/App.js',"-":!0,'deposit"':!0},'const { web3, renJS } = this.state;\n\nthis.log(`Generating deposit address...`);\n\nconst amount = 0.003; // BTC\nconst mint = await renJS.lockAndMint({\n  // Send BTC from the Bitcoin blockchain to the Ethereum blockchain.\n  asset: "BTC",\n  from: Bitcoin(),\n  to: Ethereum(web3.currentProvider).Contract({\n    // The contract we want to interact with\n    sendTo: contractAddress,\n\n    // The name of the function we want to call\n    contractFn: "deposit",\n\n    // Arguments expected for calling `deposit`\n    contractParams: [\n      {\n        name: "_msg",\n        type: "bytes",\n        value: Buffer.from(`Depositing ${amount} BTC`),\n      },\n    ],\n  }),\n});\n')),Object(o.mdx)("p",null,"Each LockAndMint object has a unique ",Object(o.mdx)("em",{parentName:"p"},"gateway address"),", generated from the details we provided to it. We want to show the gateway address to the user and then wait for them to send BTC to this address. Add the following log:"),Object(o.mdx)("pre",null,Object(o.mdx)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/App.js - deposit (continued)"',title:'"src/App.js',"-":!0,deposit:!0,'(continued)"':!0},"// Show the gateway address to the user so that they can transfer their BTC to it.\nthis.log(`Deposit ${amount} BTC to ${mint.gatewayAddress}`);\n")),Object(o.mdx)("p",null,"To handle deposits received at the gateway address, the mint object emits ",Object(o.mdx)("inlineCode",{parentName:"p"},'"deposit"')," events that can be listened to using ",Object(o.mdx)("inlineCode",{parentName:"p"},'mint.on("deposit", ...)'),". After detecting a deposit, there's three steps for completing the asset bridging:"),Object(o.mdx)("ol",null,Object(o.mdx)("li",{parentName:"ol"},"waiting for the deposit to be confirmed,"),Object(o.mdx)("li",{parentName:"ol"},"submitting the deposit to RenVM and wait for a signature, and"),Object(o.mdx)("li",{parentName:"ol"},"submitting to the mint-chain - in our example this is Ethereum.")),Object(o.mdx)("p",null,"We perform these steps inside the ",Object(o.mdx)("inlineCode",{parentName:"p"},'"deposit"')," event callback:"),Object(o.mdx)("pre",null,Object(o.mdx)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/App.js - deposit (continued)"',title:'"src/App.js',"-":!0,deposit:!0,'(continued)"':!0},'mint.on("deposit", async (deposit) => {\n  // Details of the deposit are available from `deposit.depositDetails`.\n\n  const hash = deposit.txHash();\n  const depositLog = (msg) =>\n    this.log(\n      `BTC deposit: ${Bitcoin.utils.transactionExplorerLink(\n        deposit.depositDetails.transaction,\n        "testnet"\n      )}\\n\n      RenVM Hash: ${hash}\\n\n      Status: ${deposit.status}\\n\n      ${msg}`\n    );\n\n  await deposit\n    .confirmed()\n    .on("target", (target) => depositLog(`0/${target} confirmations`))\n    .on("confirmation", (confs, target) =>\n      depositLog(`${confs}/${target} confirmations`)\n    );\n\n  await deposit\n    .signed()\n    // Print RenVM status - "pending", "confirming" or "done".\n    .on("status", (status) => depositLog(`Status: ${status}`));\n\n  await deposit\n    .mint()\n    // Print Ethereum transaction hash.\n    .on("transactionHash", (txHash) =>\n      this.log(`Ethereum transaction: ${String(txHash)}\\nSubmitting...`)\n    );\n\n  this.log(`Deposited ${amount} BTC.`);\n});\n')),Object(o.mdx)("p",null,Object(o.mdx)("inlineCode",{parentName:"p"},"deposit.status")," returns the current progress of the deposit, and will be one of ",Object(o.mdx)("inlineCode",{parentName:"p"},'"detected"'),", ",Object(o.mdx)("inlineCode",{parentName:"p"},'"confirmed"'),", ",Object(o.mdx)("inlineCode",{parentName:"p"},'"signed"'),", ",Object(o.mdx)("inlineCode",{parentName:"p"},'"submitted"')," or ",Object(o.mdx)("inlineCode",{parentName:"p"},'"reverted"'),". (See ",Object(o.mdx)("a",{parentName:"p",href:"https://renproject.github.io/ren-js-docs/enums/depositstatus.html"},"DepositStatus docs"),")"),Object(o.mdx)("p",null,"In addition to receiving ",Object(o.mdx)("inlineCode",{parentName:"p"},'.on("deposit", ...)')," events, you can also manually provide the details of a deposit using ",Object(o.mdx)("inlineCode",{parentName:"p"},"mint.processDeposit"),". The parameter should match the type of ",Object(o.mdx)("inlineCode",{parentName:"p"},"deposit.depositDetails")," of a deposit object returned ",Object(o.mdx)("inlineCode",{parentName:"p"},'from.on("deposit", ...)'),"."),Object(o.mdx)("h3",{id:"bridging-btc-back-from-ethereum"},"Bridging BTC back from Ethereum"),Object(o.mdx)("p",null,"In order to return the BTC back from Ethereum, the renBTC must be burned, and a recipient BTC address nominated. RenVM will automatically see and process the burn, releasing the BTC to the recipient.\nRenJS can be used to:"),Object(o.mdx)("ol",null,Object(o.mdx)("li",{parentName:"ol"},"initiate a burn by providing it the details to burn the renBTC, or"),Object(o.mdx)("li",{parentName:"ol"},"monitor an existing burn by providing it with the transaction hash or identifier of the burn.")),Object(o.mdx)("p",null,"Initiating a burn looks like the following:"),Object(o.mdx)("pre",null,Object(o.mdx)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/App.js - withdraw"',title:'"src/App.js',"-":!0,'withdraw"':!0},'const { web3, renJS, balance } = this.state;\n\nconst recipient = prompt("Enter BTC recipient:");\nconst amount = balance;\nconst burnAndRelease = await renJS.burnAndRelease({\n  // Send BTC from Ethereum back to the Bitcoin blockchain.\n  asset: "BTC",\n  to: Bitcoin().Address(recipient),\n  from: Ethereum(web3.currentProvider).Contract((btcAddress) => ({\n    sendTo: contractAddress,\n\n    contractFn: "withdraw",\n\n    contractParams: [\n      {\n        type: "bytes",\n        name: "_msg",\n        value: Buffer.from(`Withdrawing ${amount} BTC`),\n      },\n      {\n        type: "bytes",\n        name: "_to",\n        value: btcAddress,\n      },\n      {\n        type: "uint256",\n        name: "_amount",\n        value: RenJS.utils.toSmallestUnit(amount, 8),\n      },\n    ],\n  })),\n});\n\nlet confirmations = 0;\nawait burnAndRelease\n  .burn()\n  // Ethereum transaction confirmations.\n  .on("confirmation", (confs) => {\n    confirmations = confs;\n  })\n  // Print Ethereum transaction hash.\n  .on("transactionHash", (txHash) => this.log(`txHash: ${String(txHash)}`));\n\nawait burnAndRelease\n  .release()\n  // Print RenVM status - "pending", "confirming" or "done".\n  .on("status", (status) =>\n    status === "confirming"\n      ? this.log(`${status} (${confirmations}/15)`)\n      : this.log(status)\n  )\n  // Print RenVM transaction hash\n  .on("txHash", this.log);\n\nthis.log(`Withdrew ${amount} BTC to ${recipient}.`);\n')),Object(o.mdx)("h3",{id:"complete-appjs"},"Complete App.js"),Object(o.mdx)("p",null,"Your ",Object(o.mdx)("inlineCode",{parentName:"p"},"App.js")," file should now look like this (don't forget to replace the contract address):"),Object(o.mdx)("pre",null,Object(o.mdx)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/App.js"',title:'"src/App.js"'},'import React from "react";\nimport RenJS from "@renproject/ren";\nimport { Bitcoin, Ethereum } from "@renproject/chains";\nimport Web3 from "web3";\nimport "./App.css";\n\nimport ABI from "./ABI.json";\n\n// Replace with your contract\'s address.\nconst contractAddress = "0x3Aa969d343BD6AE66c4027Bb61A382DC96e88150";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      balance: 0,\n      message: "",\n      error: "",\n      renJS: new RenJS("testnet", { useV2TransactionFormat: true }),\n    };\n  }\n\n  componentDidMount = async () => {\n    let web3Provider;\n\n    // Initialize web3 (https://medium.com/coinmonks/web3-js-ethereum-javascript-api-72f7b22e2f0a)\n    // Modern dApp browsers...\n    if (window.ethereum) {\n      web3Provider = window.ethereum;\n      try {\n        // Request account access\n        await window.ethereum.enable();\n      } catch (error) {\n        // User denied account access...\n        this.logError("Please allow access to your Web3 wallet.");\n        return;\n      }\n    }\n    // Legacy dApp browsers...\n    else if (window.web3) {\n      web3Provider = window.web3.currentProvider;\n    }\n    // If no injected web3 instance is detected, fall back to Ganache\n    else {\n      this.logError("Please install MetaMask!");\n      return;\n    }\n\n    const web3 = new Web3(web3Provider);\n\n    const networkID = await web3.eth.net.getId();\n    if (networkID !== 42) {\n      this.logError("Please set your network to Kovan.");\n      return;\n    }\n\n    this.setState({ web3 }, () => {\n      // Update balances immediately and every 10 seconds\n      this.updateBalance();\n      setInterval(() => {\n        this.updateBalance();\n      }, 10 * 1000);\n    });\n  };\n\n  render = () => {\n    const { balance, message, error } = this.state;\n    return (\n      <div className="App">\n        <p>Balance: {balance} BTC</p>\n        <p>\n          <button onClick={() => this.deposit().catch(this.logError)}>\n            Deposit 0.003 BTC\n          </button>\n        </p>\n        <p>\n          <button onClick={() => this.withdraw().catch(this.logError)}>\n            Withdraw {balance} BTC\n          </button>\n        </p>\n        {message.split("\\n").map((line) => (\n          <p>{line}</p>\n        ))}\n        {error ? <p style={{ color: "red" }}>{error}</p> : null}\n      </div>\n    );\n  };\n\n  updateBalance = async () => {\n    const { web3 } = this.state;\n    const contract = new web3.eth.Contract(ABI, contractAddress);\n    const balance = await contract.methods.balance().call();\n    this.setState({ balance: parseInt(balance.toString()) / 10 ** 8 });\n  };\n\n  logError = (error) => {\n    console.error(error);\n    this.setState({ error: String((error || {}).message || error) });\n  };\n\n  log = (message) => {\n    this.setState({ message });\n  };\n\n  deposit = async () => {\n    this.logError(""); // Reset error\n\n    const { web3, renJS } = this.state;\n\n    this.log(`Generating deposit address...`);\n\n    const amount = 0.003; // BTC\n    const mint = await renJS.lockAndMint({\n      // Send BTC from the Bitcoin blockchain to the Ethereum blockchain.\n      asset: "BTC",\n      from: Bitcoin(),\n      to: Ethereum(web3.currentProvider).Contract({\n        // The contract we want to interact with\n        sendTo: contractAddress,\n\n        // The name of the function we want to call\n        contractFn: "deposit",\n\n        // Arguments expected for calling `deposit`\n        contractParams: [\n          {\n            name: "_msg",\n            type: "bytes",\n            value: Buffer.from(`Depositing ${amount} BTC`),\n          },\n        ],\n      }),\n    });\n\n    // Show the gateway address to the user so that they can transfer their BTC to it.\n    this.log(`Deposit ${amount} BTC to ${mint.gatewayAddress}`);\n\n    mint.on("deposit", async (deposit) => {\n      // Details of the deposit are available from `deposit.depositDetails`.\n\n      const hash = deposit.txHash();\n      const depositLog = (msg) =>\n        this.log(\n          `BTC deposit: ${Bitcoin.utils.transactionExplorerLink(\n            deposit.depositDetails.transaction,\n            "testnet"\n          )}\\n\n          RenVM Hash: ${hash}\\n\n          Status: ${deposit.status}\\n\n          ${msg}`\n        );\n\n      await deposit\n        .confirmed()\n        .on("target", (target) => depositLog(`0/${target} confirmations`))\n        .on("confirmation", (confs, target) =>\n          depositLog(`${confs}/${target} confirmations`)\n        );\n\n      await deposit\n        .signed()\n        // Print RenVM status - "pending", "confirming" or "done".\n        .on("status", (status) => depositLog(`Status: ${status}`));\n\n      await deposit\n        .mint()\n        // Print Ethereum transaction hash.\n        .on("transactionHash", (txHash) => depositLog(`Mint tx: ${txHash}`));\n\n      this.log(`Deposited ${amount} BTC.`);\n    });\n  };\n\n  withdraw = async () => {\n    this.logError(""); // Reset error\n\n    const { web3, renJS, balance } = this.state;\n\n    const recipient = prompt("Enter BTC recipient:");\n    const amount = balance;\n    const burnAndRelease = await renJS.burnAndRelease({\n      // Send BTC from Ethereum back to the Bitcoin blockchain.\n      asset: "BTC",\n      to: Bitcoin().Address(recipient),\n      from: Ethereum(web3.currentProvider).Contract((btcAddress) => ({\n        sendTo: contractAddress,\n\n        contractFn: "withdraw",\n\n        contractParams: [\n          {\n            type: "bytes",\n            name: "_msg",\n            value: Buffer.from(`Withdrawing ${amount} BTC`),\n          },\n          {\n            type: "bytes",\n            name: "_to",\n            value: btcAddress,\n          },\n          {\n            type: "uint256",\n            name: "_amount",\n            value: RenJS.utils.toSmallestUnit(amount, 8),\n          },\n        ],\n      })),\n    });\n\n    let confirmations = 0;\n    await burnAndRelease\n      .burn()\n      // Ethereum transaction confirmations.\n      .on("confirmation", (confs) => {\n        confirmations = confs;\n      })\n      // Print Ethereum transaction hash.\n      .on("transactionHash", (txHash) =>\n        this.log(`Ethereum transaction: ${String(txHash)}\\nSubmitting...`)\n      );\n\n    await burnAndRelease\n      .release()\n      // Print RenVM status - "pending", "confirming" or "done".\n      .on("status", (status) =>\n        status === "confirming"\n          ? this.log(`${status} (${confirmations}/15)`)\n          : this.log(status)\n      )\n      // Print RenVM transaction hash\n      .on("txHash", (hash) => this.log(`RenVM hash: ${hash}`));\n\n    this.log(`Withdrew ${amount} BTC to ${recipient}.`);\n  };\n}\n\nexport default App;\n')),Object(o.mdx)("h3",{id:"testing-it"},"Testing it"),Object(o.mdx)("p",null,'If you click "Deposit 0.003 BTC", it should show you a Bitcoin address:'),Object(o.mdx)("p",null,Object(o.mdx)("img",{alt:"An example of our new multi-blockchain dApp",src:n(7064).default})),Object(o.mdx)("p",null,"If you don't already have Testnet BTC, you'll need to go to a Bitcoin Testnet faucet (we recommend ",Object(o.mdx)("a",{parentName:"p",href:"https://testnet-faucet.mempool.co"},"https://testnet-faucet.mempool.co"),")."),Object(o.mdx)("p",null,"Send ",Object(o.mdx)("inlineCode",{parentName:"p"},"0.003")," BTC to the Bitcoin gateway address to continue. RenJS will wait for two confirmations before continuing, which may take around 15-20 minutes."),Object(o.mdx)("p",null,"After completing all the steps, you should see the balance increase by ",Object(o.mdx)("inlineCode",{parentName:"p"},"0.003")," BTC, minus fees (currently a ",Object(o.mdx)("inlineCode",{parentName:"p"},"0.001")," BTC transfer fee and ",Object(o.mdx)("inlineCode",{parentName:"p"},"0.25%")," RenVM fee)."),Object(o.mdx)("p",null,Object(o.mdx)("img",{alt:"After depositing some BTC into our Ethereum contract",src:n(757).default})),Object(o.mdx)("p",null,"Test withdrawing as well. If you don't have a Testnet BTC address to give it, the faucet lists a return address you can use. You should see the balance go back to ",Object(o.mdx)("inlineCode",{parentName:"p"},"0")," and the Bitcoin address you entered receive the BTC (again, some transfer fees will be deducted)."),Object(o.mdx)("div",{className:"admonition admonition-tip alert alert--success"},Object(o.mdx)("div",{parentName:"div",className:"admonition-heading"},Object(o.mdx)("h5",{parentName:"div"},Object(o.mdx)("span",{parentName:"h5",className:"admonition-icon"},Object(o.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(o.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),Object(o.mdx)("div",{parentName:"div",className:"admonition-content"},Object(o.mdx)("p",{parentName:"div"},"You can find the site deployed here as well: ",Object(o.mdx)("a",{parentName:"p",href:"https://renproject.github.io/renjs-tutorial"},"https://renproject.github.io/renjs-tutorial")))),Object(o.mdx)("div",{className:"admonition admonition-tip alert alert--success"},Object(o.mdx)("div",{parentName:"div",className:"admonition-heading"},Object(o.mdx)("h5",{parentName:"div"},Object(o.mdx)("span",{parentName:"h5",className:"admonition-icon"},Object(o.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(o.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),Object(o.mdx)("div",{parentName:"div",className:"admonition-content"},Object(o.mdx)("p",{parentName:"div"},"You can visit the ",Object(o.mdx)("a",{parentName:"p",href:"/ren-client-docs/blog"},"Blog")," to find more tutorials or examples."))),Object(o.mdx)("div",{className:"admonition admonition-caution alert alert--warning"},Object(o.mdx)("div",{parentName:"div",className:"admonition-heading"},Object(o.mdx)("h5",{parentName:"div"},Object(o.mdx)("span",{parentName:"h5",className:"admonition-icon"},Object(o.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},Object(o.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),Object(o.mdx)("div",{parentName:"div",className:"admonition-content"},Object(o.mdx)("p",{parentName:"div"},"The above tutorial includes basic usage of RenJS. If you are building a production site, continue to the next sections, including ",Object(o.mdx)("a",{parentName:"p",href:"/ren-js/how-to/resuming-transfers"},"Resuming transfers")," and ",Object(o.mdx)("a",{parentName:"p",href:"/ren-js/best-practices/ui-best-practices"},"RenVM UX Best Practice"),"."))))}b.isMDXComponent=!0},415:function(e,t,n){"use strict";n.r(t),n.d(t,"MDXContext",(function(){return l})),n.d(t,"MDXProvider",(function(){return u})),n.d(t,"mdx",(function(){return f})),n.d(t,"useMDXComponents",(function(){return p})),n.d(t,"withMDXComponents",(function(){return m}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),m=function(e){return function(t){var n=p(t.components);return r.a.createElement(e,i({},t,{components:n}))}},p=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=p(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},b=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,s=d(e,["components","mdxType","originalType","parentName"]),l=p(n),m=a,u=l["".concat(i,".").concat(m)]||l[m]||h[m]||o;return n?r.a.createElement(u,c(c({ref:t},s),{},{components:n})):r.a.createElement(u,c({ref:t},s))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=b;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var d=2;d<o;d++)i[d]=n[d];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},416:function(e,t,n){"use strict";var a=n(4).default;Object.defineProperty(t,"__esModule",{value:!0}),t.DocTag=t.DocType=void 0;var r,o,i=a(n(0));t.DocType=o,function(e){e.Tutorial="Tutorial",e.HowTo="How To",e.Reference="Reference",e.Explanation="Explanation"}(o||(t.DocType=o={}));var s=((r={})[o.Tutorial]="#b16bfc",r[o.HowTo]="#EC0088",r[o.Reference]="#ff823a",r[o.Explanation]="#29C0AF",r);t.DocTag=function(e){var t=e.type,n=e.marginBottom;return i.default.createElement(i.default.Fragment,null,i.default.createElement("span",{style:{border:"2px solid "+s[t]||!1,borderRadius:"5px",color:s[t]||"orange",padding:"0.1rem 0.4rem",marginBottom:void 0!==n?n:30,display:"inline-block"}},String(t)))}},418:function(e,t,n){"use strict";function a(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=a(e[t]))&&(r&&(r+=" "),r+=n);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}n.r(t),t.default=function(){for(var e,t,n=0,r="";n<arguments.length;)(e=arguments[n++])&&(t=a(e))&&(r&&(r+=" "),r+=t);return r}},434:function(e,t,n){"use strict";var a=n(4).default;Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=n(0),o=a(n(436));var i=function(){var e=(0,r.useContext)(o.default);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e};t.default=i},436:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=(0,n(0).createContext)(void 0);t.default=a},451:function(e,t,n){"use strict";var a=n(4).default,r=n(19).default;Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(0)),i=a(n(434)),s=a(n(418)),c=a(n(371));var d=37,l=39;var m=function(e){var t=e.lazy,n=e.block,a=e.defaultValue,r=e.values,m=e.groupId,p=e.className,u=(0,i.default)(),h=u.tabGroupChoices,b=u.setTabGroupChoices,f=(0,o.useState)(a),g=f[0],j=f[1],w=o.Children.toArray(e.children),v=[];if(null!=m){var x=h[m];null!=x&&x!==g&&r.some((function(e){return e.value===x}))&&j(x)}var O=function(e){var t=e.target,n=v.indexOf(t),a=w[n].props.value;j(a),null!=m&&(b(m,a),setTimeout((function(){var e,n,a,r,o,i,s,d;(e=t.getBoundingClientRect(),n=e.top,a=e.left,r=e.bottom,o=e.right,i=window,s=i.innerHeight,d=i.innerWidth,n>=0&&o<=d&&r<=s&&a>=0)||(t.scrollIntoView({block:"center",behavior:"smooth"}),t.classList.add(c.default.tabItemActive),setTimeout((function(){return t.classList.remove(c.default.tabItemActive)}),2e3))}),150))},y=function(e){var t,n;switch(e.keyCode){case l:var a=v.indexOf(e.target)+1;n=v[a]||v[0];break;case d:var r=v.indexOf(e.target)-1;n=v[r]||v[v.length-1]}null===(t=n)||void 0===t||t.focus()};return o.default.createElement("div",{className:"tabs-container"},o.default.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.default)("tabs",{"tabs--block":n},p)},r.map((function(e){var t=e.value,n=e.label;return o.default.createElement("li",{role:"tab",tabIndex:g===t?0:-1,"aria-selected":g===t,className:(0,s.default)("tabs__item",c.default.tabItem,{"tabs__item--active":g===t}),key:t,ref:function(e){return v.push(e)},onKeyDown:y,onFocus:O,onClick:O},n)}))),t?(0,o.cloneElement)(w.filter((function(e){return e.props.value===g}))[0],{className:"margin-vert--md"}):o.default.createElement("div",{className:"margin-vert--md"},w.map((function(e,t){return(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==g})}))))};t.default=m},458:function(e,t,n){"use strict";var a=n(4).default;Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=a(n(0));var o=function(e){var t=e.children,n=e.hidden,a=e.className;return r.default.createElement("div",{role:"tabpanel",hidden:n,className:a},t)};t.default=o},7064:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/tutorial-deposit-28ce97ebee618561b78b457bc8baaa68.png"},757:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/tutorial-balance-0b361cba8b503205142db0769203c839.png"}}]);