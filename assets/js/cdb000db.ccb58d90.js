(window.webpackJsonp=window.webpackJsonp||[]).push([[237],{270:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return m})),n.d(t,"default",(function(){return l}));var d=n(3),r=(n(0),n(413)),a=n(414);const o={title:"DarknodePayment"},c={unversionedId:"darknode-sol/DarknodePayment/DarknodePayment",id:"darknode-sol/DarknodePayment/DarknodePayment",isDocsHomePage:!1,title:"DarknodePayment",description:"Contract: DarknodePayment",source:"@site/contracts/darknode-sol/DarknodePayment/DarknodePayment.mdx",slug:"/darknode-sol/DarknodePayment/DarknodePayment",permalink:"/ren-client-docs/contracts/darknode-sol/DarknodePayment/DarknodePayment",editUrl:"https://github.com/renproject/ren-client-docs/edit/master/contracts/darknode-sol/DarknodePayment/DarknodePayment.mdx",version:"current",sidebar:"contracts",previous:{title:"DarknodePaymentStore",permalink:"/ren-client-docs/contracts/darknode-sol/DarknodePayment/DarknodePaymentStore"},next:{title:"ClaimlessRewardsTokenHandler",permalink:"/ren-client-docs/contracts/darknode-sol/DarknodePayment/ClaimlessRewardsTokenHandler"}},m=[{value:"Contract: <code>DarknodePayment</code>",id:"contract-darknodepayment",children:[]},{value:"Variables",id:"variables",children:[{value:"<strong><code>VERSION</code></strong>: <em><code>string</code></em>",id:"version-string",children:[]},{value:"<strong><code>ETHEREUM</code></strong>: <em><code>address</code></em>",id:"ethereum-address",children:[]},{value:"<strong><code>darknodeRegistry</code></strong>: <em><code>contract DarknodeRegistryLogicV1</code></em>",id:"darknoderegistry-contract-darknoderegistrylogicv1",children:[]},{value:"<strong><code>store</code></strong>: <em><code>contract DarknodePaymentStore</code></em>",id:"store-contract-darknodepaymentstore",children:[]},{value:"<strong><code>cycleChanger</code></strong>: <em><code>address</code></em>",id:"cyclechanger-address",children:[]},{value:"<strong><code>currentCycle</code></strong>: <em><code>uint256</code></em>",id:"currentcycle-uint256",children:[]},{value:"<strong><code>previousCycle</code></strong>: <em><code>uint256</code></em>",id:"previouscycle-uint256",children:[]},{value:"<strong><code>pendingTokens</code></strong>: <em><code>address[]</code></em>",id:"pendingtokens-address",children:[]},{value:"<strong><code>registeredTokens</code></strong>: <em><code>address[]</code></em>",id:"registeredtokens-address",children:[]},{value:"<strong><code>registeredTokenIndex</code></strong>: <em><code>mapping(address =&gt; uint256)</code></em>",id:"registeredtokenindex-mappingaddress--uint256",children:[]},{value:"<strong><code>unclaimedRewards</code></strong>: <em><code>mapping(address =&gt; uint256)</code></em>",id:"unclaimedrewards-mappingaddress--uint256",children:[]},{value:"<strong><code>previousCycleRewardShare</code></strong>: <em><code>mapping(address =&gt; uint256)</code></em>",id:"previouscyclerewardshare-mappingaddress--uint256",children:[]},{value:"<strong><code>cycleStartTime</code></strong>: <em><code>uint256</code></em>",id:"cyclestarttime-uint256",children:[]},{value:"<strong><code>nextCyclePayoutPercent</code></strong>: <em><code>uint256</code></em>",id:"nextcyclepayoutpercent-uint256",children:[]},{value:"<strong><code>currentCyclePayoutPercent</code></strong>: <em><code>uint256</code></em>",id:"currentcyclepayoutpercent-uint256",children:[]},{value:"<strong><code>rewardClaimed</code></strong>: <em><code>mapping(address =&gt; mapping(uint256 =&gt; bool))</code></em>",id:"rewardclaimed-mappingaddress--mappinguint256--bool",children:[]}]},{value:"Modifiers",id:"modifiers",children:[{value:"<code>onlyDarknode(address _darknode)</code>",id:"onlydarknodeaddress-_darknode",children:[]},{value:"<code>validPercent(uint256 _percent)</code>",id:"validpercentuint256-_percent",children:[]},{value:"<code>onlyCycleChanger()</code>",id:"onlycyclechanger",children:[]}]},{value:"Functions",id:"functions",children:[{value:"<strong><code>constructor</code></strong> <em><code>(string _VERSION, contract DarknodeRegistryLogicV1 _darknodeRegistry, contract DarknodePaymentStore _darknodePaymentStore, uint256 _cyclePayoutPercent)</code></em> (public)",id:"constructor-string-_version-contract-darknoderegistrylogicv1-_darknoderegistry-contract-darknodepaymentstore-_darknodepaymentstore-uint256-_cyclepayoutpercent-public",children:[]},{value:"<strong><code>updateDarknodeRegistry</code></strong> <em><code>(contract DarknodeRegistryLogicV1 _darknodeRegistry)</code></em> (external)",id:"updatedarknoderegistry-contract-darknoderegistrylogicv1-_darknoderegistry-external",children:[]},{value:"<strong><code>withdraw</code></strong> <em><code>(address _darknode, address _token)</code></em> (public)",id:"withdraw-address-_darknode-address-_token-public",children:[]},{value:"<strong><code>withdrawMultiple</code></strong> <em><code>(address[] _darknodes, address[] _tokens)</code></em> (external)",id:"withdrawmultiple-address-_darknodes-address-_tokens-external",children:[]},{value:"<strong><code>fallback</code></strong> <em><code>()</code></em> (external)",id:"fallback--external",children:[]},{value:"<strong><code>currentCycleRewardPool</code></strong> <em><code>(address _token) \u2192 uint256</code></em> (external)",id:"currentcyclerewardpool-address-_token-\u2192-uint256-external",children:[]},{value:"<strong><code>darknodeBalances</code></strong> <em><code>(address _darknodeID, address _token) \u2192 uint256</code></em> (external)",id:"darknodebalances-address-_darknodeid-address-_token-\u2192-uint256-external",children:[]},{value:"<strong><code>changeCycle</code></strong> <em><code>() \u2192 uint256</code></em> (external)",id:"changecycle--\u2192-uint256-external",children:[]},{value:"<strong><code>deposit</code></strong> <em><code>(uint256 _value, address _token)</code></em> (external)",id:"deposit-uint256-_value-address-_token-external",children:[]},{value:"<strong><code>forward</code></strong> <em><code>(address _token)</code></em> (external)",id:"forward-address-_token-external",children:[]},{value:"<strong><code>claim</code></strong> <em><code>(address _darknode)</code></em> (external)",id:"claim-address-_darknode-external",children:[]},{value:"<strong><code>registerToken</code></strong> <em><code>(address _token)</code></em> (external)",id:"registertoken-address-_token-external",children:[]},{value:"<strong><code>tokenPendingRegistration</code></strong> <em><code>(address _token) \u2192 bool</code></em> (public)",id:"tokenpendingregistration-address-_token-\u2192-bool-public",children:[]},{value:"<strong><code>deregisterToken</code></strong> <em><code>(address _token)</code></em> (external)",id:"deregistertoken-address-_token-external",children:[]},{value:"<strong><code>updateCycleChanger</code></strong> <em><code>(address _addr)</code></em> (external)",id:"updatecyclechanger-address-_addr-external",children:[]},{value:"<strong><code>updatePayoutPercentage</code></strong> <em><code>(uint256 _percent)</code></em> (external)",id:"updatepayoutpercentage-uint256-_percent-external",children:[]},{value:"<strong><code>transferStoreOwnership</code></strong> <em><code>(contract DarknodePayment _newOwner)</code></em> (external)",id:"transferstoreownership-contract-darknodepayment-_newowner-external",children:[]},{value:"<strong><code>claimStoreOwnership</code></strong> <em><code>()</code></em> (external)",id:"claimstoreownership--external",children:[]}]},{value:"Events",id:"events",children:[{value:"<strong><code>LogDarknodeClaim</code></strong> <em><code>(address _darknode, uint256 _cycle)</code></em>",id:"logdarknodeclaim-address-_darknode-uint256-_cycle",children:[]},{value:"<strong><code>LogPaymentReceived</code></strong> <em><code>(address _payer, address _token, uint256 _amount)</code></em>",id:"logpaymentreceived-address-_payer-address-_token-uint256-_amount",children:[]},{value:"<strong><code>LogDarknodeWithdrew</code></strong> <em><code>(address _darknodeOperator, address _darknodeID, address _token, uint256 _value)</code></em>",id:"logdarknodewithdrew-address-_darknodeoperator-address-_darknodeid-address-_token-uint256-_value",children:[]},{value:"<strong><code>LogPayoutPercentChanged</code></strong> <em><code>(uint256 _newPercent, uint256 _oldPercent)</code></em>",id:"logpayoutpercentchanged-uint256-_newpercent-uint256-_oldpercent",children:[]},{value:"<strong><code>LogCycleChangerChanged</code></strong> <em><code>(address _newCycleChanger, address _oldCycleChanger)</code></em>",id:"logcyclechangerchanged-address-_newcyclechanger-address-_oldcyclechanger",children:[]},{value:"<strong><code>LogTokenRegistered</code></strong> <em><code>(address _token)</code></em>",id:"logtokenregistered-address-_token",children:[]},{value:"<strong><code>LogTokenDeregistered</code></strong> <em><code>(address _token)</code></em>",id:"logtokenderegistered-address-_token",children:[]},{value:"<strong><code>LogDarknodeRegistryUpdated</code></strong> <em><code>(contract DarknodeRegistryLogicV1 _previousDarknodeRegistry, contract DarknodeRegistryLogicV1 _nextDarknodeRegistry)</code></em>",id:"logdarknoderegistryupdated-contract-darknoderegistrylogicv1-_previousdarknoderegistry-contract-darknoderegistrylogicv1-_nextdarknoderegistry",children:[]}]}],i={toc:m};function l({components:e,...t}){return Object(r.mdx)("wrapper",Object(d.default)({},i,t,{components:e,mdxType:"MDXLayout"}),Object(r.mdx)(a.DocTag,{type:a.DocType.Reference,mdxType:"DocTag"}),Object(r.mdx)("h2",{id:"contract-darknodepayment"},"Contract: ",Object(r.mdx)("inlineCode",{parentName:"h2"},"DarknodePayment")),Object(r.mdx)("p",null,"DarknodePayment is responsible for paying off darknodes for their\ncomputation."),Object(r.mdx)("p",null,"Inherits from:"),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("inlineCode",{parentName:"li"},"Claimable")),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("inlineCode",{parentName:"li"},"Ownable")),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("inlineCode",{parentName:"li"},"Context")),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("inlineCode",{parentName:"li"},"Initializable"))),Object(r.mdx)("hr",null),Object(r.mdx)("br",null),Object(r.mdx)("h2",{id:"variables"},"Variables"),Object(r.mdx)("h3",{id:"version-string"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"VERSION")),": ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"string"))),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"ethereum-address"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"ETHEREUM")),": ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"address"))),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"darknoderegistry-contract-darknoderegistrylogicv1"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"darknodeRegistry")),": ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"contract DarknodeRegistryLogicV1"))),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"store-contract-darknodepaymentstore"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"store")),": ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"contract DarknodePaymentStore"))),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"cyclechanger-address"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"cycleChanger")),": ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"address"))),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"currentcycle-uint256"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"currentCycle")),": ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"uint256"))),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"previouscycle-uint256"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"previousCycle")),": ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"uint256"))),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"pendingtokens-address"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"pendingTokens")),": ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"address[]"))),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"registeredtokens-address"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"registeredTokens")),": ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"address[]"))),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"registeredtokenindex-mappingaddress--uint256"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"registeredTokenIndex")),": ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"mapping(address => uint256)"))),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"unclaimedrewards-mappingaddress--uint256"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"unclaimedRewards")),": ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"mapping(address => uint256)"))),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"previouscyclerewardshare-mappingaddress--uint256"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"previousCycleRewardShare")),": ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"mapping(address => uint256)"))),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"cyclestarttime-uint256"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"cycleStartTime")),": ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"uint256"))),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"nextcyclepayoutpercent-uint256"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"nextCyclePayoutPercent")),": ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"uint256"))),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"currentcyclepayoutpercent-uint256"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"currentCyclePayoutPercent")),": ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"uint256"))),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"rewardclaimed-mappingaddress--mappinguint256--bool"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"rewardClaimed")),": ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"mapping(address => mapping(uint256 => bool))"))),Object(r.mdx)("hr",null),Object(r.mdx)("br",null),Object(r.mdx)("h2",{id:"modifiers"},"Modifiers"),Object(r.mdx)("h3",{id:"onlydarknodeaddress-_darknode"},Object(r.mdx)("inlineCode",{parentName:"h3"},"onlyDarknode(address _darknode)")),Object(r.mdx)("p",null,"Restrict a function registered dark nodes to call a function."),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"validpercentuint256-_percent"},Object(r.mdx)("inlineCode",{parentName:"h3"},"validPercent(uint256 _percent)")),Object(r.mdx)("p",null,"Restrict a function to have a valid percentage."),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"onlycyclechanger"},Object(r.mdx)("inlineCode",{parentName:"h3"},"onlyCycleChanger()")),Object(r.mdx)("p",null,"Restrict a function to be called by cycleChanger."),Object(r.mdx)("hr",null),Object(r.mdx)("br",null),Object(r.mdx)("h2",{id:"functions"},"Functions"),Object(r.mdx)("h3",{id:"constructor-string-_version-contract-darknoderegistrylogicv1-_darknoderegistry-contract-darknodepaymentstore-_darknodepaymentstore-uint256-_cyclepayoutpercent-public"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"constructor"))," ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"(string _VERSION, contract DarknodeRegistryLogicV1 _darknodeRegistry, contract DarknodePaymentStore _darknodePaymentStore, uint256 _cyclePayoutPercent)"))," (public)"),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Params")),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("p",{parentName:"li"},Object(r.mdx)("inlineCode",{parentName:"p"},"_VERSION"),": A string defining the contract version.")),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("p",{parentName:"li"},Object(r.mdx)("inlineCode",{parentName:"p"},"_darknodeRegistry"),": The address of the DarknodeRegistry contract.")),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("p",{parentName:"li"},Object(r.mdx)("inlineCode",{parentName:"p"},"_darknodePaymentStore"),": The address of the DarknodePaymentStore\ncontract."))),Object(r.mdx)("p",null,"The contract constructor. Starts the current cycle using the\ntime of deploy."),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"updatedarknoderegistry-contract-darknoderegistrylogicv1-_darknoderegistry-external"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"updateDarknodeRegistry"))," ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"(contract DarknodeRegistryLogicV1 _darknodeRegistry)"))," (external)"),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Params")),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("inlineCode",{parentName:"li"},"_darknodeRegistry"),": The address of the Darknode Registry\ncontract.")),Object(r.mdx)("p",null,"Allows the contract owner to update the address of the\ndarknode registry contract."),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"withdraw-address-_darknode-address-_token-public"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"withdraw"))," ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"(address _darknode, address _token)"))," (public)"),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Params")),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("p",{parentName:"li"},Object(r.mdx)("inlineCode",{parentName:"p"},"_darknode"),": The address of the darknode.")),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("p",{parentName:"li"},Object(r.mdx)("inlineCode",{parentName:"p"},"_token"),": Which token to transfer."))),Object(r.mdx)("p",null,"Transfers the funds allocated to the darknode to the darknode\nowner."),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"withdrawmultiple-address-_darknodes-address-_tokens-external"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"withdrawMultiple"))," ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"(address[] _darknodes, address[] _tokens)"))," (external)"),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"fallback--external"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"fallback"))," ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"()"))," (external)"),Object(r.mdx)("p",null,"Forward all payments to the DarknodePaymentStore."),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"currentcyclerewardpool-address-_token-\u2192-uint256-external"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"currentCycleRewardPool"))," ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"(address _token) \u2192 uint256"))," (external)"),Object(r.mdx)("p",null,"The current balance of the contract available as reward for the\ncurrent cycle."),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"darknodebalances-address-_darknodeid-address-_token-\u2192-uint256-external"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"darknodeBalances"))," ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"(address _darknodeID, address _token) \u2192 uint256"))," (external)"),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"changecycle--\u2192-uint256-external"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"changeCycle"))," ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"() \u2192 uint256"))," (external)"),Object(r.mdx)("p",null,"Changes the current cycle."),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"deposit-uint256-_value-address-_token-external"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"deposit"))," ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"(uint256 _value, address _token)"))," (external)"),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Params")),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("p",{parentName:"li"},Object(r.mdx)("inlineCode",{parentName:"p"},"_value"),": The amount of token deposit in the token's smallest unit.")),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("p",{parentName:"li"},Object(r.mdx)("inlineCode",{parentName:"p"},"_token"),": The token address."))),Object(r.mdx)("p",null,"Deposits token into the contract to be paid to the Darknodes."),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"forward-address-_token-external"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"forward"))," ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"(address _token)"))," (external)"),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Params")),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("inlineCode",{parentName:"li"},"_token"),": The token address.")),Object(r.mdx)("p",null,"Forwards any tokens that have been sent to the DarknodePayment contract\nprobably by mistake, to the DarknodePaymentStore."),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"claim-address-_darknode-external"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"claim"))," ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"(address _darknode)"))," (external)"),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Params")),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("inlineCode",{parentName:"li"},"_darknode"),": The address of the darknode to claim.")),Object(r.mdx)("p",null,"Claims the rewards allocated to the darknode last epoch."),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"registertoken-address-_token-external"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"registerToken"))," ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"(address _token)"))," (external)"),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Params")),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("inlineCode",{parentName:"li"},"_token"),": The address of the token to be registered.")),Object(r.mdx)("p",null,"Adds tokens to be payable. Registration is pending until next\ncycle."),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"tokenpendingregistration-address-_token-\u2192-bool-public"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"tokenPendingRegistration"))," ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"(address _token) \u2192 bool"))," (public)"),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"deregistertoken-address-_token-external"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"deregisterToken"))," ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"(address _token)"))," (external)"),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Params")),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("inlineCode",{parentName:"li"},"_token"),": The address of the token to be deregistered.")),Object(r.mdx)("p",null,"Removes a token from the list of supported tokens.\nDeregistration is pending until next cycle."),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"updatecyclechanger-address-_addr-external"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"updateCycleChanger"))," ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"(address _addr)"))," (external)"),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Params")),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("inlineCode",{parentName:"li"},"_addr"),": The new CycleChanger contract address.")),Object(r.mdx)("p",null,"Updates the CycleChanger contract address."),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"updatepayoutpercentage-uint256-_percent-external"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"updatePayoutPercentage"))," ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"(uint256 _percent)"))," (external)"),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Params")),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("inlineCode",{parentName:"li"},"_percent"),": The percentage of payout for darknodes.")),Object(r.mdx)("p",null,"Updates payout percentage."),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"transferstoreownership-contract-darknodepayment-_newowner-external"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"transferStoreOwnership"))," ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"(contract DarknodePayment _newOwner)"))," (external)"),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Params")),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("inlineCode",{parentName:"li"},"_newOwner"),": The address to transfer the ownership to.")),Object(r.mdx)("p",null,"Allows the contract owner to initiate an ownership transfer of\nthe DarknodePaymentStore."),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"claimstoreownership--external"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"claimStoreOwnership"))," ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"()"))," (external)"),Object(r.mdx)("p",null,"Claims ownership of the store passed in to the constructor.\n",Object(r.mdx)("inlineCode",{parentName:"p"},"transferStoreOwnership")," must have previously been called when\ntransferring from another DarknodePaymentStore."),Object(r.mdx)("hr",null),Object(r.mdx)("br",null),Object(r.mdx)("h2",{id:"events"},"Events"),Object(r.mdx)("h3",{id:"logdarknodeclaim-address-_darknode-uint256-_cycle"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"LogDarknodeClaim"))," ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"(address _darknode, uint256 _cycle)"))),Object(r.mdx)("p",null,"Emitted when a darknode claims their share of reward."),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Params")),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("p",{parentName:"li"},Object(r.mdx)("inlineCode",{parentName:"p"},"_darknode"),": The darknode which claimed.")),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("p",{parentName:"li"},Object(r.mdx)("inlineCode",{parentName:"p"},"_cycle"),": The cycle that the darknode claimed for."))),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"logpaymentreceived-address-_payer-address-_token-uint256-_amount"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"LogPaymentReceived"))," ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"(address _payer, address _token, uint256 _amount)"))),Object(r.mdx)("p",null,"Emitted when someone pays the DarknodePayment contract."),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Params")),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("p",{parentName:"li"},Object(r.mdx)("inlineCode",{parentName:"p"},"_payer"),": The darknode which claimed.")),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("p",{parentName:"li"},Object(r.mdx)("inlineCode",{parentName:"p"},"_amount"),": The cycle that the darknode claimed for.")),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("p",{parentName:"li"},Object(r.mdx)("inlineCode",{parentName:"p"},"_token"),": The address of the token that was transferred."))),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"logdarknodewithdrew-address-_darknodeoperator-address-_darknodeid-address-_token-uint256-_value"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"LogDarknodeWithdrew"))," ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"(address _darknodeOperator, address _darknodeID, address _token, uint256 _value)"))),Object(r.mdx)("p",null,"Emitted when a darknode calls withdraw."),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Params")),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("p",{parentName:"li"},Object(r.mdx)("inlineCode",{parentName:"p"},"_darknodeOperator"),": The address of the darknode's operator.")),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("p",{parentName:"li"},Object(r.mdx)("inlineCode",{parentName:"p"},"_darknodeID"),": The address of the darknode which withdrew.")),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("p",{parentName:"li"},Object(r.mdx)("inlineCode",{parentName:"p"},"_value"),": The amount of DAI withdrawn.")),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("p",{parentName:"li"},Object(r.mdx)("inlineCode",{parentName:"p"},"_token"),": The address of the token that was withdrawn."))),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"logpayoutpercentchanged-uint256-_newpercent-uint256-_oldpercent"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"LogPayoutPercentChanged"))," ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"(uint256 _newPercent, uint256 _oldPercent)"))),Object(r.mdx)("p",null,"Emitted when the payout percent changes."),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Params")),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("p",{parentName:"li"},Object(r.mdx)("inlineCode",{parentName:"p"},"_newPercent"),": The new percent.")),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("p",{parentName:"li"},Object(r.mdx)("inlineCode",{parentName:"p"},"_oldPercent"),": The old percent."))),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"logcyclechangerchanged-address-_newcyclechanger-address-_oldcyclechanger"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"LogCycleChangerChanged"))," ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"(address _newCycleChanger, address _oldCycleChanger)"))),Object(r.mdx)("p",null,"Emitted when the CycleChanger address changes."),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Params")),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("p",{parentName:"li"},Object(r.mdx)("inlineCode",{parentName:"p"},"_newCycleChanger"),": The new CycleChanger.")),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("p",{parentName:"li"},Object(r.mdx)("inlineCode",{parentName:"p"},"_oldCycleChanger"),": The old CycleChanger."))),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"logtokenregistered-address-_token"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"LogTokenRegistered"))," ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"(address _token)"))),Object(r.mdx)("p",null,"Emitted when a new token is registered."),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Params")),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("inlineCode",{parentName:"li"},"_token"),": The token that was registered.")),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"logtokenderegistered-address-_token"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"LogTokenDeregistered"))," ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"(address _token)"))),Object(r.mdx)("p",null,"Emitted when a token is deregistered."),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Params")),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("inlineCode",{parentName:"li"},"_token"),": The token that was deregistered.")),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"logdarknoderegistryupdated-contract-darknoderegistrylogicv1-_previousdarknoderegistry-contract-darknoderegistrylogicv1-_nextdarknoderegistry"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"LogDarknodeRegistryUpdated"))," ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"(contract DarknodeRegistryLogicV1 _previousDarknodeRegistry, contract DarknodeRegistryLogicV1 _nextDarknodeRegistry)"))),Object(r.mdx)("p",null,"Emitted when the DarknodeRegistry is updated."),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Params")),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("p",{parentName:"li"},Object(r.mdx)("inlineCode",{parentName:"p"},"_previousDarknodeRegistry"),": The address of the old registry.")),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("p",{parentName:"li"},Object(r.mdx)("inlineCode",{parentName:"p"},"_nextDarknodeRegistry"),": The address of the new registry."))),Object(r.mdx)("hr",null))}l.isMDXComponent=!0},413:function(e,t,n){"use strict";n.r(t),n.d(t,"MDXContext",(function(){return l})),n.d(t,"MDXProvider",(function(){return x})),n.d(t,"mdx",(function(){return O})),n.d(t,"useMDXComponents",(function(){return p})),n.d(t,"withMDXComponents",(function(){return s}));var d=n(0),r=n.n(d);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var d in n)Object.prototype.hasOwnProperty.call(n,d)&&(e[d]=n[d])}return e}).apply(this,arguments)}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var d=Object.getOwnPropertySymbols(e);t&&(d=d.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,d)}return n}function m(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,d,r=function(e,t){if(null==e)return{};var n,d,r={},a=Object.keys(e);for(d=0;d<a.length;d++)n=a[d],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(d=0;d<a.length;d++)n=a[d],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),s=function(e){return function(t){var n=p(t.components);return r.a.createElement(e,o({},t,{components:n}))}},p=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):m(m({},t),e)),n},x=function(e){var t=p(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var n=e.components,d=e.mdxType,a=e.originalType,o=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),l=p(n),s=d,x=l["".concat(o,".").concat(s)]||l[s]||b[s]||a;return n?r.a.createElement(x,m(m({ref:t},c),{},{components:n})):r.a.createElement(x,m({ref:t},c))}));function O(e,t){var n=arguments,d=t&&t.mdxType;if("string"==typeof e||d){var a=n.length,o=new Array(a);o[0]=u;var c={};for(var m in t)hasOwnProperty.call(t,m)&&(c[m]=t[m]);c.originalType=e,c.mdxType="string"==typeof e?e:d,o[1]=c;for(var i=2;i<a;i++)o[i]=n[i];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},414:function(e,t,n){"use strict";var d=n(4).default;Object.defineProperty(t,"__esModule",{value:!0}),t.DocTag=t.DocType=void 0;var r=d(n(0));let a;t.DocType=a,function(e){e.Tutorial="Tutorial",e.HowTo="How To",e.Reference="Reference",e.Explanation="Explanation"}(a||(t.DocType=a={}));const o={[a.Tutorial]:"#b16bfc",[a.HowTo]:"#EC0088",[a.Reference]:"#ff823a",[a.Explanation]:"#29C0AF"};t.DocTag=({type:e,marginBottom:t})=>r.default.createElement(r.default.Fragment,null,r.default.createElement("span",{style:{border:"2px solid "+o[e]||!1,borderRadius:"5px",color:o[e]||"orange",padding:"0.1rem 0.4rem",marginBottom:void 0!==t?t:30,display:"inline-block"}},String(e)))}}]);