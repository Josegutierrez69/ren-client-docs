(window.webpackJsonp=window.webpackJsonp||[]).push([[69],{102:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return m})),n.d(t,"metadata",(function(){return d})),n.d(t,"toc",(function(){return i})),n.d(t,"default",(function(){return c}));var a=n(3),r=(n(0),n(415));const m={id:"lib_utils_build_main_assert",title:"Module: lib/utils/build/main/assert",sidebar_label:"lib/utils/build/main/assert",sidebar_position:0,custom_edit_url:null},d={unversionedId:"api/modules/lib_utils_build_main_assert",id:"api/modules/lib_utils_build_main_assert",isDocsHomePage:!1,title:"Module: lib/utils/build/main/assert",description:"Module: lib/utils/build/main/assert",source:"@site/ren-js/api/modules/lib_utils_build_main_assert.md",slug:"/api/modules/lib_utils_build_main_assert",permalink:"/ren-client-docs/ren-js/api/modules/lib_utils_build_main_assert",editUrl:null,version:"current",sidebar_label:"lib/utils/build/main/assert"},i=[{value:"Functions",id:"functions",children:[{value:"assert",id:"assert",children:[]},{value:"assertObject",id:"assertobject",children:[]},{value:"assertType",id:"asserttype",children:[]}]}],l={toc:i};function c({components:e,...t}){return Object(r.mdx)("wrapper",Object(a.default)({},l,t,{components:e,mdxType:"MDXLayout"}),Object(r.mdx)("h1",{id:"module-libutilsbuildmainassert"},"Module: lib/utils/build/main/assert"),Object(r.mdx)("h2",{id:"functions"},"Functions"),Object(r.mdx)("h3",{id:"assert"},"assert"),Object(r.mdx)("p",null,"\u25b8 ",Object(r.mdx)("inlineCode",{parentName:"p"},"Const")," ",Object(r.mdx)("strong",{parentName:"p"},"assert"),"(",Object(r.mdx)("inlineCode",{parentName:"p"},"assertion"),": ",Object(r.mdx)("em",{parentName:"p"},"boolean"),", ",Object(r.mdx)("inlineCode",{parentName:"p"},"sentence?"),": ",Object(r.mdx)("em",{parentName:"p"},"string"),"): assertion is true"),Object(r.mdx)("h4",{id:"parameters"},"Parameters"),Object(r.mdx)("table",null,Object(r.mdx)("thead",{parentName:"table"},Object(r.mdx)("tr",{parentName:"thead"},Object(r.mdx)("th",{parentName:"tr",align:"left"},"Name"),Object(r.mdx)("th",{parentName:"tr",align:"left"},"Type"))),Object(r.mdx)("tbody",{parentName:"table"},Object(r.mdx)("tr",{parentName:"tbody"},Object(r.mdx)("td",{parentName:"tr",align:"left"},Object(r.mdx)("inlineCode",{parentName:"td"},"assertion")),Object(r.mdx)("td",{parentName:"tr",align:"left"},Object(r.mdx)("em",{parentName:"td"},"boolean"))),Object(r.mdx)("tr",{parentName:"tbody"},Object(r.mdx)("td",{parentName:"tr",align:"left"},Object(r.mdx)("inlineCode",{parentName:"td"},"sentence?")),Object(r.mdx)("td",{parentName:"tr",align:"left"},Object(r.mdx)("em",{parentName:"td"},"string"))))),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Returns:")," assertion is true"),Object(r.mdx)("p",null,"Defined in: ren-js/packages/lib/utils/build/main/assert.d.ts:1"),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"assertobject"},"assertObject"),Object(r.mdx)("p",null,"\u25b8 ",Object(r.mdx)("inlineCode",{parentName:"p"},"Const")," ",Object(r.mdx)("strong",{parentName:"p"},"assertObject"),"<T",">","(",Object(r.mdx)("inlineCode",{parentName:"p"},"fieldTypes"),": ",Object(r.mdx)("em",{parentName:"p"},"ObjectDefinition"),"<T",">",", ",Object(r.mdx)("inlineCode",{parentName:"p"},"objects"),": { ","[key: string]",": T;  }): ",Object(r.mdx)("em",{parentName:"p"},"boolean")),Object(r.mdx)("h4",{id:"type-parameters"},"Type parameters"),Object(r.mdx)("table",null,Object(r.mdx)("thead",{parentName:"table"},Object(r.mdx)("tr",{parentName:"thead"},Object(r.mdx)("th",{parentName:"tr",align:"left"},"Name"),Object(r.mdx)("th",{parentName:"tr",align:"left"},"Type"))),Object(r.mdx)("tbody",{parentName:"table"},Object(r.mdx)("tr",{parentName:"tbody"},Object(r.mdx)("td",{parentName:"tr",align:"left"},Object(r.mdx)("inlineCode",{parentName:"td"},"T")),Object(r.mdx)("td",{parentName:"tr",align:"left"},Object(r.mdx)("em",{parentName:"td"},"object"))))),Object(r.mdx)("h4",{id:"parameters-1"},"Parameters"),Object(r.mdx)("table",null,Object(r.mdx)("thead",{parentName:"table"},Object(r.mdx)("tr",{parentName:"thead"},Object(r.mdx)("th",{parentName:"tr",align:"left"},"Name"),Object(r.mdx)("th",{parentName:"tr",align:"left"},"Type"))),Object(r.mdx)("tbody",{parentName:"table"},Object(r.mdx)("tr",{parentName:"tbody"},Object(r.mdx)("td",{parentName:"tr",align:"left"},Object(r.mdx)("inlineCode",{parentName:"td"},"fieldTypes")),Object(r.mdx)("td",{parentName:"tr",align:"left"},Object(r.mdx)("em",{parentName:"td"},"ObjectDefinition"),"<T",">")),Object(r.mdx)("tr",{parentName:"tbody"},Object(r.mdx)("td",{parentName:"tr",align:"left"},Object(r.mdx)("inlineCode",{parentName:"td"},"objects")),Object(r.mdx)("td",{parentName:"tr",align:"left"},Object(r.mdx)("em",{parentName:"td"},"object"))))),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Returns:")," ",Object(r.mdx)("em",{parentName:"p"},"boolean")),Object(r.mdx)("p",null,"Defined in: ren-js/packages/lib/utils/build/main/assert.d.ts:43"),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"asserttype"},"assertType"),Object(r.mdx)("p",null,"\u25b8 ",Object(r.mdx)("inlineCode",{parentName:"p"},"Const")," ",Object(r.mdx)("strong",{parentName:"p"},"assertType"),"<T",">","(",Object(r.mdx)("inlineCode",{parentName:"p"},"type"),": ",Object(r.mdx)("em",{parentName:"p"},"string"),", ",Object(r.mdx)("inlineCode",{parentName:"p"},"objects"),": { ","[value: string]",": T;  }): objects is object"),Object(r.mdx)("p",null,"The following is a set of rudimentary type validation functions."),Object(r.mdx)("p",null,"The main function is ",Object(r.mdx)("inlineCode",{parentName:"p"},"assertType"),", which accepts a type and a dictionary of\nvalues."),Object(r.mdx)("p",null,"The type must be a string that matches the following pattern:"),Object(r.mdx)("pre",null,Object(r.mdx)("code",{parentName:"pre"},'TYPE:\n  | TYPE \'|\' TYPE\n  | Array<TYPE>\n  | TYPE[]\n  | PRIMITIVE_TYPE\n\nPRIMITIVE_TYPE:\n  | "string"\n  | "number"\n  | "bigint"\n  | "boolean"\n  | "symbol"\n  | "undefined"\n  | "object"\n  | "function"\n  | "null"\n  | "any"\n  | "Buffer"\n  | "BigNumber"\n')),Object(r.mdx)("p",null,"Types are matched by a regex so '|' can't be used at multiple levels, e.g.\n",Object(r.mdx)("inlineCode",{parentName:"p"},"string | Array<string | number>"),"."),Object(r.mdx)("h4",{id:"type-parameters-1"},"Type parameters"),Object(r.mdx)("table",null,Object(r.mdx)("thead",{parentName:"table"},Object(r.mdx)("tr",{parentName:"thead"},Object(r.mdx)("th",{parentName:"tr",align:"left"},"Name"),Object(r.mdx)("th",{parentName:"tr",align:"left"},"Default"))),Object(r.mdx)("tbody",{parentName:"table"},Object(r.mdx)("tr",{parentName:"tbody"},Object(r.mdx)("td",{parentName:"tr",align:"left"},Object(r.mdx)("inlineCode",{parentName:"td"},"T")),Object(r.mdx)("td",{parentName:"tr",align:"left"},Object(r.mdx)("em",{parentName:"td"},"unknown"))))),Object(r.mdx)("h4",{id:"parameters-2"},"Parameters"),Object(r.mdx)("table",null,Object(r.mdx)("thead",{parentName:"table"},Object(r.mdx)("tr",{parentName:"thead"},Object(r.mdx)("th",{parentName:"tr",align:"left"},"Name"),Object(r.mdx)("th",{parentName:"tr",align:"left"},"Type"))),Object(r.mdx)("tbody",{parentName:"table"},Object(r.mdx)("tr",{parentName:"tbody"},Object(r.mdx)("td",{parentName:"tr",align:"left"},Object(r.mdx)("inlineCode",{parentName:"td"},"type")),Object(r.mdx)("td",{parentName:"tr",align:"left"},Object(r.mdx)("em",{parentName:"td"},"string"))),Object(r.mdx)("tr",{parentName:"tbody"},Object(r.mdx)("td",{parentName:"tr",align:"left"},Object(r.mdx)("inlineCode",{parentName:"td"},"objects")),Object(r.mdx)("td",{parentName:"tr",align:"left"},Object(r.mdx)("em",{parentName:"td"},"object"))))),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Returns:")," objects is object"),Object(r.mdx)("p",null,"Defined in: ren-js/packages/lib/utils/build/main/assert.d.ts:35"))}c.isMDXComponent=!0},415:function(e,t,n){"use strict";n.r(t),n.d(t,"MDXContext",(function(){return b})),n.d(t,"MDXProvider",(function(){return o})),n.d(t,"mdx",(function(){return O})),n.d(t,"useMDXComponents",(function(){return s})),n.d(t,"withMDXComponents",(function(){return p}));var a=n(0),r=n.n(a);function m(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function d(){return(d=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){m(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},m=Object.keys(e);for(a=0;a<m.length;a++)n=m[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var m=Object.getOwnPropertySymbols(e);for(a=0;a<m.length;a++)n=m[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var b=r.a.createContext({}),p=function(e){return function(t){var n=s(t.components);return r.a.createElement(e,d({},t,{components:n}))}},s=function(e){var t=r.a.useContext(b),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},o=function(e){var t=s(e.components);return r.a.createElement(b.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},j=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,m=e.originalType,d=e.parentName,i=c(e,["components","mdxType","originalType","parentName"]),b=s(n),p=a,o=b["".concat(d,".").concat(p)]||b[p]||u[p]||m;return n?r.a.createElement(o,l(l({ref:t},i),{},{components:n})):r.a.createElement(o,l({ref:t},i))}));function O(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var m=n.length,d=new Array(m);d[0]=j;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,d[1]=i;for(var c=2;c<m;c++)d[c]=n[c];return r.a.createElement.apply(null,d)}return r.a.createElement.apply(null,n)}j.displayName="MDXCreateElement"}}]);