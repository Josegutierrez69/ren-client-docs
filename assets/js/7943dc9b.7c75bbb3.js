(window.webpackJsonp=window.webpackJsonp||[]).push([[136],{169:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return d})),n.d(t,"toc",(function(){return m})),n.d(t,"default",(function(){return l}));var a=n(3),i=(n(0),n(413)),r=n(414);const o={title:"MintGatewayLogicV1"},d={unversionedId:"gateway-sol/Gateway/MintGatewayLogicV1",id:"gateway-sol/Gateway/MintGatewayLogicV1",isDocsHomePage:!1,title:"MintGatewayLogicV1",description:"Contract: MintGatewayLogicV1",source:"@site/contracts/gateway-sol/Gateway/MintGatewayLogicV1.mdx",slug:"/gateway-sol/Gateway/MintGatewayLogicV1",permalink:"/ren-client-docs/contracts/gateway-sol/Gateway/MintGatewayLogicV1",editUrl:"https://github.com/renproject/ren-client-docs/edit/master/contracts/gateway-sol/Gateway/MintGatewayLogicV1.mdx",version:"current",sidebar:"contracts",previous:{title:"GatewayRegistry",permalink:"/ren-client-docs/contracts/gateway-sol/Gateway/GatewayRegistry"},next:{title:"MintGatewayUpgrader",permalink:"/ren-client-docs/contracts/gateway-sol/Gateway/MintGatewayUpgrader"}},m=[{value:"Contract: <code>MintGatewayLogicV1</code>",id:"contract-mintgatewaylogicv1",children:[]},{value:"Modifiers",id:"modifiers",children:[{value:"<code>onlyOwnerOrMintAuthority()</code>",id:"onlyownerormintauthority",children:[]}]},{value:"Functions",id:"functions",children:[{value:"<strong><code>initialize</code></strong> <em><code>(contract RenERC20LogicV1 _token, address _feeRecipient, address _mintAuthority, uint16 _mintFee, uint16 _burnFee, uint256 _minimumBurnAmount)</code></em> (public)",id:"initialize-contract-renerc20logicv1-_token-address-_feerecipient-address-_mintauthority-uint16-_mintfee-uint16-_burnfee-uint256-_minimumburnamount-public",children:[]},{value:"<strong><code>updateSelectorHash</code></strong> <em><code>(bytes32 _selectorHash)</code></em> (public)",id:"updateselectorhash-bytes32-_selectorhash-public",children:[]},{value:"<strong><code>updateSymbol</code></strong> <em><code>(string symbol)</code></em> (public)",id:"updatesymbol-string-symbol-public",children:[]},{value:"<strong><code>claimTokenOwnership</code></strong> <em><code>()</code></em> (public)",id:"claimtokenownership--public",children:[]},{value:"<strong><code>transferTokenOwnership</code></strong> <em><code>(contract MintGatewayLogicV1 _nextTokenOwner)</code></em> (public)",id:"transfertokenownership-contract-mintgatewaylogicv1-_nexttokenowner-public",children:[]},{value:"<strong><code>updateMintAuthority</code></strong> <em><code>(address _nextMintAuthority)</code></em> (public)",id:"updatemintauthority-address-_nextmintauthority-public",children:[]},{value:"<strong><code>_legacy_updateMintAuthority</code></strong> <em><code>(address _nextMintAuthority)</code></em> (public)",id:"_legacy_updatemintauthority-address-_nextmintauthority-public",children:[]},{value:"<strong><code>updateMinimumBurnAmount</code></strong> <em><code>(uint256 _minimumBurnAmount)</code></em> (public)",id:"updateminimumburnamount-uint256-_minimumburnamount-public",children:[]},{value:"<strong><code>updateFeeRecipient</code></strong> <em><code>(address _nextFeeRecipient)</code></em> (public)",id:"updatefeerecipient-address-_nextfeerecipient-public",children:[]},{value:"<strong><code>updateMintFee</code></strong> <em><code>(uint16 _nextMintFee)</code></em> (public)",id:"updatemintfee-uint16-_nextmintfee-public",children:[]},{value:"<strong><code>updateBurnFee</code></strong> <em><code>(uint16 _nextBurnFee)</code></em> (public)",id:"updateburnfee-uint16-_nextburnfee-public",children:[]},{value:"<strong><code>mint</code></strong> <em><code>(bytes32 _pHash, uint256 _amountUnderlying, bytes32 _nHash, bytes _sig) \u2192 uint256</code></em> (public)",id:"mint-bytes32-_phash-uint256-_amountunderlying-bytes32-_nhash-bytes-_sig-\u2192-uint256-public",children:[]},{value:"<strong><code>burn</code></strong> <em><code>(bytes _to, uint256 _amount) \u2192 uint256</code></em> (public)",id:"burn-bytes-_to-uint256-_amount-\u2192-uint256-public",children:[]},{value:"<strong><code>getBurn</code></strong> <em><code>(uint256 _n) \u2192 uint256 _blocknumber, bytes _to, uint256 _amount, string _chain, bytes _payload</code></em> (public)",id:"getburn-uint256-_n-\u2192-uint256-_blocknumber-bytes-_to-uint256-_amount-string-_chain-bytes-_payload-public",children:[]},{value:"<strong><code>verifySignature</code></strong> <em><code>(bytes32 _sigHash, bytes _sig) \u2192 bool</code></em> (public)",id:"verifysignature-bytes32-_sighash-bytes-_sig-\u2192-bool-public",children:[]},{value:"<strong><code>_legacy_verifySignature</code></strong> <em><code>(bytes32 _sigHash, bytes _sig) \u2192 bool</code></em> (public)",id:"_legacy_verifysignature-bytes32-_sighash-bytes-_sig-\u2192-bool-public",children:[]},{value:"<strong><code>hashForSignature</code></strong> <em><code>(bytes32 _pHash, uint256 _amount, address _to, bytes32 _nHash) \u2192 bytes32</code></em> (public)",id:"hashforsignature-bytes32-_phash-uint256-_amount-address-_to-bytes32-_nhash-\u2192-bytes32-public",children:[]},{value:"<strong><code>_legacy_hashForSignature</code></strong> <em><code>(bytes32 _pHash, uint256 _amount, address _to, bytes32 _nHash) \u2192 bytes32</code></em> (public)",id:"_legacy_hashforsignature-bytes32-_phash-uint256-_amount-address-_to-bytes32-_nhash-\u2192-bytes32-public",children:[]}]},{value:"Events",id:"events",children:[{value:"<strong><code>LogMintAuthorityUpdated</code></strong> <em><code>(address _newMintAuthority)</code></em>",id:"logmintauthorityupdated-address-_newmintauthority",children:[]},{value:"<strong><code>LogMint</code></strong> <em><code>(address _to, uint256 _amount, uint256 _n, bytes32 _nHash)</code></em>",id:"logmint-address-_to-uint256-_amount-uint256-_n-bytes32-_nhash",children:[]},{value:"<strong><code>LogBurn</code></strong> <em><code>(bytes _to, uint256 _amount, uint256 _n, bytes _indexedTo)</code></em>",id:"logburn-bytes-_to-uint256-_amount-uint256-_n-bytes-_indexedto",children:[]}]}],c={toc:m};function l({components:e,...t}){return Object(i.mdx)("wrapper",Object(a.default)({},c,t,{components:e,mdxType:"MDXLayout"}),Object(i.mdx)(r.DocTag,{type:r.DocType.Reference,mdxType:"DocTag"}),Object(i.mdx)("h2",{id:"contract-mintgatewaylogicv1"},"Contract: ",Object(i.mdx)("inlineCode",{parentName:"h2"},"MintGatewayLogicV1")),Object(i.mdx)("p",null,"Gateway handles verifying mint and burn requests. A mintAuthority\napproves new assets to be minted by providing a digital signature. An owner\nof an asset can request for it to be burnt."),Object(i.mdx)("p",null,"Inherits from:"),Object(i.mdx)("ul",null,Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("inlineCode",{parentName:"li"},"GatewayStateV2")),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("inlineCode",{parentName:"li"},"GatewayStateV1")),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("inlineCode",{parentName:"li"},"IGateway")),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("inlineCode",{parentName:"li"},"CanReclaimTokens")),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("inlineCode",{parentName:"li"},"Claimable")),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("inlineCode",{parentName:"li"},"Ownable")),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("inlineCode",{parentName:"li"},"Context")),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("inlineCode",{parentName:"li"},"Initializable"))),Object(i.mdx)("hr",null),Object(i.mdx)("br",null),Object(i.mdx)("h2",{id:"modifiers"},"Modifiers"),Object(i.mdx)("h3",{id:"onlyownerormintauthority"},Object(i.mdx)("inlineCode",{parentName:"h3"},"onlyOwnerOrMintAuthority()")),Object(i.mdx)("p",null,"Only allow the Darknode Payment contract."),Object(i.mdx)("hr",null),Object(i.mdx)("br",null),Object(i.mdx)("h2",{id:"functions"},"Functions"),Object(i.mdx)("h3",{id:"initialize-contract-renerc20logicv1-_token-address-_feerecipient-address-_mintauthority-uint16-_mintfee-uint16-_burnfee-uint256-_minimumburnamount-public"},Object(i.mdx)("strong",{parentName:"h3"},Object(i.mdx)("inlineCode",{parentName:"strong"},"initialize"))," ",Object(i.mdx)("em",{parentName:"h3"},Object(i.mdx)("inlineCode",{parentName:"em"},"(contract RenERC20LogicV1 _token, address _feeRecipient, address _mintAuthority, uint16 _mintFee, uint16 _burnFee, uint256 _minimumBurnAmount)"))," (public)"),Object(i.mdx)("p",null,Object(i.mdx)("strong",{parentName:"p"},"Params")),Object(i.mdx)("ul",null,Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("p",{parentName:"li"},Object(i.mdx)("inlineCode",{parentName:"p"},"_token"),": The RenERC20 this Gateway is responsible for.")),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("p",{parentName:"li"},Object(i.mdx)("inlineCode",{parentName:"p"},"_feeRecipient"),": The recipient of burning and minting fees.")),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("p",{parentName:"li"},Object(i.mdx)("inlineCode",{parentName:"p"},"_mintAuthority"),": The address of the key that can sign mint\nrequests.")),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("p",{parentName:"li"},Object(i.mdx)("inlineCode",{parentName:"p"},"_mintFee"),": The amount subtracted each mint request and\nforwarded to the feeRecipient. In BIPS.")),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("p",{parentName:"li"},Object(i.mdx)("inlineCode",{parentName:"p"},"_burnFee"),": The amount subtracted each burn request and\nforwarded to the feeRecipient. In BIPS."))),Object(i.mdx)("hr",null),Object(i.mdx)("h3",{id:"updateselectorhash-bytes32-_selectorhash-public"},Object(i.mdx)("strong",{parentName:"h3"},Object(i.mdx)("inlineCode",{parentName:"strong"},"updateSelectorHash"))," ",Object(i.mdx)("em",{parentName:"h3"},Object(i.mdx)("inlineCode",{parentName:"em"},"(bytes32 _selectorHash)"))," (public)"),Object(i.mdx)("p",null,Object(i.mdx)("strong",{parentName:"p"},"Params")),Object(i.mdx)("ul",null,Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("inlineCode",{parentName:"li"},"_selectorHash"),": Hash of the token and chain selector.\nThe hash should calculated from\n",Object(i.mdx)("inlineCode",{parentName:"li"},"SHA256(4 bytes of selector length, selector)"))),Object(i.mdx)("hr",null),Object(i.mdx)("h3",{id:"updatesymbol-string-symbol-public"},Object(i.mdx)("strong",{parentName:"h3"},Object(i.mdx)("inlineCode",{parentName:"strong"},"updateSymbol"))," ",Object(i.mdx)("em",{parentName:"h3"},Object(i.mdx)("inlineCode",{parentName:"em"},"(string symbol)"))," (public)"),Object(i.mdx)("hr",null),Object(i.mdx)("h3",{id:"claimtokenownership--public"},Object(i.mdx)("strong",{parentName:"h3"},Object(i.mdx)("inlineCode",{parentName:"strong"},"claimTokenOwnership"))," ",Object(i.mdx)("em",{parentName:"h3"},Object(i.mdx)("inlineCode",{parentName:"em"},"()"))," (public)"),Object(i.mdx)("p",null,"Claims ownership of the token passed in to the constructor.\n",Object(i.mdx)("inlineCode",{parentName:"p"},"transferStoreOwnership")," must have previously been called.\nAnyone can call this function."),Object(i.mdx)("hr",null),Object(i.mdx)("h3",{id:"transfertokenownership-contract-mintgatewaylogicv1-_nexttokenowner-public"},Object(i.mdx)("strong",{parentName:"h3"},Object(i.mdx)("inlineCode",{parentName:"strong"},"transferTokenOwnership"))," ",Object(i.mdx)("em",{parentName:"h3"},Object(i.mdx)("inlineCode",{parentName:"em"},"(contract MintGatewayLogicV1 _nextTokenOwner)"))," (public)"),Object(i.mdx)("p",null,"Allow the owner to update the owner of the RenERC20 token."),Object(i.mdx)("hr",null),Object(i.mdx)("h3",{id:"updatemintauthority-address-_nextmintauthority-public"},Object(i.mdx)("strong",{parentName:"h3"},Object(i.mdx)("inlineCode",{parentName:"strong"},"updateMintAuthority"))," ",Object(i.mdx)("em",{parentName:"h3"},Object(i.mdx)("inlineCode",{parentName:"em"},"(address _nextMintAuthority)"))," (public)"),Object(i.mdx)("p",null,Object(i.mdx)("strong",{parentName:"p"},"Params")),Object(i.mdx)("ul",null,Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("inlineCode",{parentName:"li"},"_nextMintAuthority"),": The new mint authority address.")),Object(i.mdx)("p",null,"Allow the owner to update the mint authority."),Object(i.mdx)("hr",null),Object(i.mdx)("h3",{id:"_legacy_updatemintauthority-address-_nextmintauthority-public"},Object(i.mdx)("strong",{parentName:"h3"},Object(i.mdx)("inlineCode",{parentName:"strong"},"_legacy_updateMintAuthority"))," ",Object(i.mdx)("em",{parentName:"h3"},Object(i.mdx)("inlineCode",{parentName:"em"},"(address _nextMintAuthority)"))," (public)"),Object(i.mdx)("p",null,Object(i.mdx)("strong",{parentName:"p"},"Params")),Object(i.mdx)("ul",null,Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("inlineCode",{parentName:"li"},"_nextMintAuthority"),": The new legacy mint authority address.")),Object(i.mdx)("p",null,"Allow the owner to update the legacy mint authority."),Object(i.mdx)("hr",null),Object(i.mdx)("h3",{id:"updateminimumburnamount-uint256-_minimumburnamount-public"},Object(i.mdx)("strong",{parentName:"h3"},Object(i.mdx)("inlineCode",{parentName:"strong"},"updateMinimumBurnAmount"))," ",Object(i.mdx)("em",{parentName:"h3"},Object(i.mdx)("inlineCode",{parentName:"em"},"(uint256 _minimumBurnAmount)"))," (public)"),Object(i.mdx)("p",null,Object(i.mdx)("strong",{parentName:"p"},"Params")),Object(i.mdx)("ul",null,Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("inlineCode",{parentName:"li"},"_minimumBurnAmount"),": The new min burn amount.")),Object(i.mdx)("p",null,"Allow the owner to update the minimum burn amount."),Object(i.mdx)("hr",null),Object(i.mdx)("h3",{id:"updatefeerecipient-address-_nextfeerecipient-public"},Object(i.mdx)("strong",{parentName:"h3"},Object(i.mdx)("inlineCode",{parentName:"strong"},"updateFeeRecipient"))," ",Object(i.mdx)("em",{parentName:"h3"},Object(i.mdx)("inlineCode",{parentName:"em"},"(address _nextFeeRecipient)"))," (public)"),Object(i.mdx)("p",null,Object(i.mdx)("strong",{parentName:"p"},"Params")),Object(i.mdx)("ul",null,Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("inlineCode",{parentName:"li"},"_nextFeeRecipient"),": The address to start paying fees to.")),Object(i.mdx)("p",null,"Allow the owner to update the fee recipient."),Object(i.mdx)("hr",null),Object(i.mdx)("h3",{id:"updatemintfee-uint16-_nextmintfee-public"},Object(i.mdx)("strong",{parentName:"h3"},Object(i.mdx)("inlineCode",{parentName:"strong"},"updateMintFee"))," ",Object(i.mdx)("em",{parentName:"h3"},Object(i.mdx)("inlineCode",{parentName:"em"},"(uint16 _nextMintFee)"))," (public)"),Object(i.mdx)("p",null,Object(i.mdx)("strong",{parentName:"p"},"Params")),Object(i.mdx)("ul",null,Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("inlineCode",{parentName:"li"},"_nextMintFee"),": The new fee for minting and burning.")),Object(i.mdx)("p",null,"Allow the owner to update the 'mint' fee."),Object(i.mdx)("hr",null),Object(i.mdx)("h3",{id:"updateburnfee-uint16-_nextburnfee-public"},Object(i.mdx)("strong",{parentName:"h3"},Object(i.mdx)("inlineCode",{parentName:"strong"},"updateBurnFee"))," ",Object(i.mdx)("em",{parentName:"h3"},Object(i.mdx)("inlineCode",{parentName:"em"},"(uint16 _nextBurnFee)"))," (public)"),Object(i.mdx)("p",null,Object(i.mdx)("strong",{parentName:"p"},"Params")),Object(i.mdx)("ul",null,Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("inlineCode",{parentName:"li"},"_nextBurnFee"),": The new fee for minting and burning.")),Object(i.mdx)("p",null,"Allow the owner to update the burn fee."),Object(i.mdx)("hr",null),Object(i.mdx)("h3",{id:"mint-bytes32-_phash-uint256-_amountunderlying-bytes32-_nhash-bytes-_sig-\u2192-uint256-public"},Object(i.mdx)("strong",{parentName:"h3"},Object(i.mdx)("inlineCode",{parentName:"strong"},"mint"))," ",Object(i.mdx)("em",{parentName:"h3"},Object(i.mdx)("inlineCode",{parentName:"em"},"(bytes32 _pHash, uint256 _amountUnderlying, bytes32 _nHash, bytes _sig) \u2192 uint256"))," (public)"),Object(i.mdx)("p",null,Object(i.mdx)("strong",{parentName:"p"},"Params")),Object(i.mdx)("ul",null,Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("p",{parentName:"li"},Object(i.mdx)("inlineCode",{parentName:"p"},"_pHash"),": (payload hash) The hash of the payload associated with the\nmint.")),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("p",{parentName:"li"},Object(i.mdx)("inlineCode",{parentName:"p"},"_amountUnderlying"),": The amount of the token being minted, in its smallest\nvalue. (e.g. satoshis for BTC).")),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("p",{parentName:"li"},Object(i.mdx)("inlineCode",{parentName:"p"},"_nHash"),": (nonce hash) The hash of the nonce, amount and pHash.")),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("p",{parentName:"li"},Object(i.mdx)("inlineCode",{parentName:"p"},"_sig"),": The signature of the hash of the following values:\n(pHash, amount, msg.sender, nHash), signed by the mintAuthority."))),Object(i.mdx)("p",null,"mint verifies a mint approval signature from RenVM and creates\ntokens after taking a fee for the ",Object(i.mdx)("inlineCode",{parentName:"p"},"_feeRecipient"),"."),Object(i.mdx)("hr",null),Object(i.mdx)("h3",{id:"burn-bytes-_to-uint256-_amount-\u2192-uint256-public"},Object(i.mdx)("strong",{parentName:"h3"},Object(i.mdx)("inlineCode",{parentName:"strong"},"burn"))," ",Object(i.mdx)("em",{parentName:"h3"},Object(i.mdx)("inlineCode",{parentName:"em"},"(bytes _to, uint256 _amount) \u2192 uint256"))," (public)"),Object(i.mdx)("p",null,Object(i.mdx)("strong",{parentName:"p"},"Params")),Object(i.mdx)("ul",null,Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("p",{parentName:"li"},Object(i.mdx)("inlineCode",{parentName:"p"},"_to"),": The address to receive the un-bridged asset. The format of\nthis address should be of the destination chain.\nFor example, when burning to Bitcoin, _to should be a\nBitcoin address.")),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("p",{parentName:"li"},Object(i.mdx)("inlineCode",{parentName:"p"},"_amount"),": The amount of the token being burnt, in its\nsmallest value. (e.g. satoshis for BTC)"))),Object(i.mdx)("p",null,"burn destroys tokens after taking a fee for the ",Object(i.mdx)("inlineCode",{parentName:"p"},"_feeRecipient"),",\nallowing the associated assets to be released on their native\nchain."),Object(i.mdx)("hr",null),Object(i.mdx)("h3",{id:"getburn-uint256-_n-\u2192-uint256-_blocknumber-bytes-_to-uint256-_amount-string-_chain-bytes-_payload-public"},Object(i.mdx)("strong",{parentName:"h3"},Object(i.mdx)("inlineCode",{parentName:"strong"},"getBurn"))," ",Object(i.mdx)("em",{parentName:"h3"},Object(i.mdx)("inlineCode",{parentName:"em"},"(uint256 _n) \u2192 uint256 _blocknumber, bytes _to, uint256 _amount, string _chain, bytes _payload"))," (public)"),Object(i.mdx)("hr",null),Object(i.mdx)("h3",{id:"verifysignature-bytes32-_sighash-bytes-_sig-\u2192-bool-public"},Object(i.mdx)("strong",{parentName:"h3"},Object(i.mdx)("inlineCode",{parentName:"strong"},"verifySignature"))," ",Object(i.mdx)("em",{parentName:"h3"},Object(i.mdx)("inlineCode",{parentName:"em"},"(bytes32 _sigHash, bytes _sig) \u2192 bool"))," (public)"),Object(i.mdx)("p",null,"verifySignature checks the the provided signature matches the\nprovided parameters."),Object(i.mdx)("hr",null),Object(i.mdx)("h3",{id:"_legacy_verifysignature-bytes32-_sighash-bytes-_sig-\u2192-bool-public"},Object(i.mdx)("strong",{parentName:"h3"},Object(i.mdx)("inlineCode",{parentName:"strong"},"_legacy_verifySignature"))," ",Object(i.mdx)("em",{parentName:"h3"},Object(i.mdx)("inlineCode",{parentName:"em"},"(bytes32 _sigHash, bytes _sig) \u2192 bool"))," (public)"),Object(i.mdx)("p",null,"verifySignature checks the the provided signature matches the\nprovided parameters."),Object(i.mdx)("hr",null),Object(i.mdx)("h3",{id:"hashforsignature-bytes32-_phash-uint256-_amount-address-_to-bytes32-_nhash-\u2192-bytes32-public"},Object(i.mdx)("strong",{parentName:"h3"},Object(i.mdx)("inlineCode",{parentName:"strong"},"hashForSignature"))," ",Object(i.mdx)("em",{parentName:"h3"},Object(i.mdx)("inlineCode",{parentName:"em"},"(bytes32 _pHash, uint256 _amount, address _to, bytes32 _nHash) \u2192 bytes32"))," (public)"),Object(i.mdx)("p",null,"hashForSignature hashes the parameters so that they can be\nsigned."),Object(i.mdx)("hr",null),Object(i.mdx)("h3",{id:"_legacy_hashforsignature-bytes32-_phash-uint256-_amount-address-_to-bytes32-_nhash-\u2192-bytes32-public"},Object(i.mdx)("strong",{parentName:"h3"},Object(i.mdx)("inlineCode",{parentName:"strong"},"_legacy_hashForSignature"))," ",Object(i.mdx)("em",{parentName:"h3"},Object(i.mdx)("inlineCode",{parentName:"em"},"(bytes32 _pHash, uint256 _amount, address _to, bytes32 _nHash) \u2192 bytes32"))," (public)"),Object(i.mdx)("p",null,"_legacy_hashForSignature calculates the signature hash used by\nthe 0.2 version of RenVM. It's kept here for backwards-compatibility."),Object(i.mdx)("hr",null),Object(i.mdx)("br",null),Object(i.mdx)("h2",{id:"events"},"Events"),Object(i.mdx)("h3",{id:"logmintauthorityupdated-address-_newmintauthority"},Object(i.mdx)("strong",{parentName:"h3"},Object(i.mdx)("inlineCode",{parentName:"strong"},"LogMintAuthorityUpdated"))," ",Object(i.mdx)("em",{parentName:"h3"},Object(i.mdx)("inlineCode",{parentName:"em"},"(address _newMintAuthority)"))),Object(i.mdx)("hr",null),Object(i.mdx)("h3",{id:"logmint-address-_to-uint256-_amount-uint256-_n-bytes32-_nhash"},Object(i.mdx)("strong",{parentName:"h3"},Object(i.mdx)("inlineCode",{parentName:"strong"},"LogMint"))," ",Object(i.mdx)("em",{parentName:"h3"},Object(i.mdx)("inlineCode",{parentName:"em"},"(address _to, uint256 _amount, uint256 _n, bytes32 _nHash)"))),Object(i.mdx)("hr",null),Object(i.mdx)("h3",{id:"logburn-bytes-_to-uint256-_amount-uint256-_n-bytes-_indexedto"},Object(i.mdx)("strong",{parentName:"h3"},Object(i.mdx)("inlineCode",{parentName:"strong"},"LogBurn"))," ",Object(i.mdx)("em",{parentName:"h3"},Object(i.mdx)("inlineCode",{parentName:"em"},"(bytes _to, uint256 _amount, uint256 _n, bytes _indexedTo)"))),Object(i.mdx)("hr",null))}l.isMDXComponent=!0},413:function(e,t,n){"use strict";n.r(t),n.d(t,"MDXContext",(function(){return l})),n.d(t,"MDXProvider",(function(){return b})),n.d(t,"mdx",(function(){return x})),n.d(t,"useMDXComponents",(function(){return s})),n.d(t,"withMDXComponents",(function(){return u}));var a=n(0),i=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function d(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function m(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?d(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):d(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=i.a.createContext({}),u=function(e){return function(t){var n=s(t.components);return i.a.createElement(e,o({},t,{components:n}))}},s=function(e){var t=i.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):m(m({},t),e)),n},b=function(e){var t=s(e.components);return i.a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},h=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),l=s(n),u=a,b=l["".concat(o,".").concat(u)]||l[u]||p[u]||r;return n?i.a.createElement(b,m(m({ref:t},d),{},{components:n})):i.a.createElement(b,m({ref:t},d))}));function x(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=h;var d={};for(var m in t)hasOwnProperty.call(t,m)&&(d[m]=t[m]);d.originalType=e,d.mdxType="string"==typeof e?e:a,o[1]=d;for(var c=2;c<r;c++)o[c]=n[c];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},414:function(e,t,n){"use strict";var a=n(4).default;Object.defineProperty(t,"__esModule",{value:!0}),t.DocTag=t.DocType=void 0;var i=a(n(0));let r;t.DocType=r,function(e){e.Tutorial="Tutorial",e.HowTo="How To",e.Reference="Reference",e.Explanation="Explanation"}(r||(t.DocType=r={}));const o={[r.Tutorial]:"#b16bfc",[r.HowTo]:"#EC0088",[r.Reference]:"#ff823a",[r.Explanation]:"#29C0AF"};t.DocTag=({type:e,marginBottom:t})=>i.default.createElement(i.default.Fragment,null,i.default.createElement("span",{style:{border:"2px solid "+o[e]||!1,borderRadius:"5px",color:o[e]||"orange",padding:"0.1rem 0.4rem",marginBottom:void 0!==t?t:30,display:"inline-block"}},String(e)))}}]);