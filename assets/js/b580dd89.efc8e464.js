(window.webpackJsonp=window.webpackJsonp||[]).push([[215],{248:function(e,n,d){"use strict";d.r(n),d.d(n,"frontMatter",(function(){return o})),d.d(n,"metadata",(function(){return i})),d.d(n,"toc",(function(){return m})),d.d(n,"default",(function(){return l}));var t=d(3),r=(d(0),d(415)),a=d(416);const o={title:"DarknodeRegistryLogicV1"},i={unversionedId:"darknode-sol/DarknodeRegistry/DarknodeRegistryLogicV1",id:"darknode-sol/DarknodeRegistry/DarknodeRegistryLogicV1",isDocsHomePage:!1,title:"DarknodeRegistryLogicV1",description:"Contract: DarknodeRegistryLogicV1",source:"@site/contracts/darknode-sol/DarknodeRegistry/DarknodeRegistryLogicV1.mdx",slug:"/darknode-sol/DarknodeRegistry/DarknodeRegistryLogicV1",permalink:"/ren-client-docs/contracts/darknode-sol/DarknodeRegistry/DarknodeRegistryLogicV1",editUrl:"https://github.com/renproject/ren-client-docs/edit/master/contracts/darknode-sol/DarknodeRegistry/DarknodeRegistryLogicV1.mdx",version:"current",sidebar:"contracts",previous:{title:"DarknodeRegistryStore",permalink:"/ren-client-docs/contracts/darknode-sol/DarknodeRegistry/DarknodeRegistryStore"},next:{title:"DarknodeRegistryStateV1",permalink:"/ren-client-docs/contracts/darknode-sol/DarknodeRegistry/DarknodeRegistryStateV1"}},m=[{value:"Contract: <code>DarknodeRegistryLogicV1</code>",id:"contract-darknoderegistrylogicv1",children:[]},{value:"Modifiers",id:"modifiers",children:[{value:"<code>onlyDarknodeOperator(address _darknodeID)</code>",id:"onlydarknodeoperatoraddress-_darknodeid",children:[]},{value:"<code>onlyRefunded(address _darknodeID)</code>",id:"onlyrefundedaddress-_darknodeid",children:[]},{value:"<code>onlyRefundable(address _darknodeID)</code>",id:"onlyrefundableaddress-_darknodeid",children:[]},{value:"<code>onlyDeregisterable(address _darknodeID)</code>",id:"onlyderegisterableaddress-_darknodeid",children:[]},{value:"<code>onlySlasher()</code>",id:"onlyslasher",children:[]},{value:"<code>onlyDarknode(address _darknodeID)</code>",id:"onlydarknodeaddress-_darknodeid",children:[]}]},{value:"Functions",id:"functions",children:[{value:"<strong><code>initialize</code></strong> <em><code>(string _VERSION, contract RenToken _renAddress, contract DarknodeRegistryStore _storeAddress, uint256 _minimumBond, uint256 _minimumPodSize, uint256 _minimumEpochIntervalSeconds, uint256 _deregistrationIntervalSeconds)</code></em> (public)",id:"initialize-string-_version-contract-rentoken-_renaddress-contract-darknoderegistrystore-_storeaddress-uint256-_minimumbond-uint256-_minimumpodsize-uint256-_minimumepochintervalseconds-uint256-_deregistrationintervalseconds-public",children:[]},{value:"<strong><code>register</code></strong> <em><code>(address _darknodeID, bytes _publicKey)</code></em> (external)",id:"register-address-_darknodeid-bytes-_publickey-external",children:[]},{value:"<strong><code>deregister</code></strong> <em><code>(address _darknodeID)</code></em> (external)",id:"deregister-address-_darknodeid-external",children:[]},{value:"<strong><code>epoch</code></strong> <em><code>()</code></em> (external)",id:"epoch--external",children:[]},{value:"<strong><code>transferStoreOwnership</code></strong> <em><code>(contract DarknodeRegistryLogicV1 _newOwner)</code></em> (external)",id:"transferstoreownership-contract-darknoderegistrylogicv1-_newowner-external",children:[]},{value:"<strong><code>claimStoreOwnership</code></strong> <em><code>()</code></em> (external)",id:"claimstoreownership--external",children:[]},{value:"<strong><code>updateDarknodePayment</code></strong> <em><code>(contract IDarknodePayment _darknodePayment)</code></em> (external)",id:"updatedarknodepayment-contract-idarknodepayment-_darknodepayment-external",children:[]},{value:"<strong><code>updateMinimumBond</code></strong> <em><code>(uint256 _nextMinimumBond)</code></em> (external)",id:"updateminimumbond-uint256-_nextminimumbond-external",children:[]},{value:"<strong><code>updateMinimumPodSize</code></strong> <em><code>(uint256 _nextMinimumPodSize)</code></em> (external)",id:"updateminimumpodsize-uint256-_nextminimumpodsize-external",children:[]},{value:"<strong><code>updateMinimumEpochInterval</code></strong> <em><code>(uint256 _nextMinimumEpochInterval)</code></em> (external)",id:"updateminimumepochinterval-uint256-_nextminimumepochinterval-external",children:[]},{value:"<strong><code>updateSlasher</code></strong> <em><code>(contract IDarknodeSlasher _slasher)</code></em> (external)",id:"updateslasher-contract-idarknodeslasher-_slasher-external",children:[]},{value:"<strong><code>slash</code></strong> <em><code>(address _guilty, address _challenger, uint256 _percentage)</code></em> (external)",id:"slash-address-_guilty-address-_challenger-uint256-_percentage-external",children:[]},{value:"<strong><code>refund</code></strong> <em><code>(address _darknodeID)</code></em> (external)",id:"refund-address-_darknodeid-external",children:[]},{value:"<strong><code>getDarknodeOperator</code></strong> <em><code>(address _darknodeID) \u2192 address payable</code></em> (external)",id:"getdarknodeoperator-address-_darknodeid-\u2192-address-payable-external",children:[]},{value:"<strong><code>getDarknodeBond</code></strong> <em><code>(address _darknodeID) \u2192 uint256</code></em> (external)",id:"getdarknodebond-address-_darknodeid-\u2192-uint256-external",children:[]},{value:"<strong><code>getDarknodePublicKey</code></strong> <em><code>(address _darknodeID) \u2192 bytes</code></em> (external)",id:"getdarknodepublickey-address-_darknodeid-\u2192-bytes-external",children:[]},{value:"<strong><code>getDarknodes</code></strong> <em><code>(address _start, uint256 _count) \u2192 address[]</code></em> (external)",id:"getdarknodes-address-_start-uint256-_count-\u2192-address-external",children:[]},{value:"<strong><code>getPreviousDarknodes</code></strong> <em><code>(address _start, uint256 _count) \u2192 address[]</code></em> (external)",id:"getpreviousdarknodes-address-_start-uint256-_count-\u2192-address-external",children:[]},{value:"<strong><code>isPendingRegistration</code></strong> <em><code>(address _darknodeID) \u2192 bool</code></em> (public)",id:"ispendingregistration-address-_darknodeid-\u2192-bool-public",children:[]},{value:"<strong><code>isPendingDeregistration</code></strong> <em><code>(address _darknodeID) \u2192 bool</code></em> (public)",id:"ispendingderegistration-address-_darknodeid-\u2192-bool-public",children:[]},{value:"<strong><code>isDeregistered</code></strong> <em><code>(address _darknodeID) \u2192 bool</code></em> (public)",id:"isderegistered-address-_darknodeid-\u2192-bool-public",children:[]},{value:"<strong><code>isDeregisterable</code></strong> <em><code>(address _darknodeID) \u2192 bool</code></em> (public)",id:"isderegisterable-address-_darknodeid-\u2192-bool-public",children:[]},{value:"<strong><code>isRefunded</code></strong> <em><code>(address _darknodeID) \u2192 bool</code></em> (public)",id:"isrefunded-address-_darknodeid-\u2192-bool-public",children:[]},{value:"<strong><code>isRefundable</code></strong> <em><code>(address _darknodeID) \u2192 bool</code></em> (public)",id:"isrefundable-address-_darknodeid-\u2192-bool-public",children:[]},{value:"<strong><code>darknodeRegisteredAt</code></strong> <em><code>(address darknodeID) \u2192 uint256</code></em> (external)",id:"darknoderegisteredat-address-darknodeid-\u2192-uint256-external",children:[]},{value:"<strong><code>darknodeDeregisteredAt</code></strong> <em><code>(address darknodeID) \u2192 uint256</code></em> (external)",id:"darknodederegisteredat-address-darknodeid-\u2192-uint256-external",children:[]},{value:"<strong><code>isRegistered</code></strong> <em><code>(address _darknodeID) \u2192 bool</code></em> (public)",id:"isregistered-address-_darknodeid-\u2192-bool-public",children:[]},{value:"<strong><code>isRegisteredInPreviousEpoch</code></strong> <em><code>(address _darknodeID) \u2192 bool</code></em> (public)",id:"isregisteredinpreviousepoch-address-_darknodeid-\u2192-bool-public",children:[]}]},{value:"Events",id:"events",children:[{value:"<strong><code>LogDarknodeRegistered</code></strong> <em><code>(address _darknodeOperator, address _darknodeID, uint256 _bond)</code></em>",id:"logdarknoderegistered-address-_darknodeoperator-address-_darknodeid-uint256-_bond",children:[]},{value:"<strong><code>LogDarknodeDeregistered</code></strong> <em><code>(address _darknodeOperator, address _darknodeID)</code></em>",id:"logdarknodederegistered-address-_darknodeoperator-address-_darknodeid",children:[]},{value:"<strong><code>LogDarknodeRefunded</code></strong> <em><code>(address _darknodeOperator, address _darknodeID, uint256 _amount)</code></em>",id:"logdarknoderefunded-address-_darknodeoperator-address-_darknodeid-uint256-_amount",children:[]},{value:"<strong><code>LogDarknodeSlashed</code></strong> <em><code>(address _darknodeOperator, address _darknodeID, address _challenger, uint256 _percentage)</code></em>",id:"logdarknodeslashed-address-_darknodeoperator-address-_darknodeid-address-_challenger-uint256-_percentage",children:[]},{value:"<strong><code>LogNewEpoch</code></strong> <em><code>(uint256 epochhash)</code></em>",id:"lognewepoch-uint256-epochhash",children:[]},{value:"<strong><code>LogMinimumBondUpdated</code></strong> <em><code>(uint256 _previousMinimumBond, uint256 _nextMinimumBond)</code></em>",id:"logminimumbondupdated-uint256-_previousminimumbond-uint256-_nextminimumbond",children:[]},{value:"<strong><code>LogMinimumPodSizeUpdated</code></strong> <em><code>(uint256 _previousMinimumPodSize, uint256 _nextMinimumPodSize)</code></em>",id:"logminimumpodsizeupdated-uint256-_previousminimumpodsize-uint256-_nextminimumpodsize",children:[]},{value:"<strong><code>LogMinimumEpochIntervalUpdated</code></strong> <em><code>(uint256 _previousMinimumEpochInterval, uint256 _nextMinimumEpochInterval)</code></em>",id:"logminimumepochintervalupdated-uint256-_previousminimumepochinterval-uint256-_nextminimumepochinterval",children:[]},{value:"<strong><code>LogSlasherUpdated</code></strong> <em><code>(address _previousSlasher, address _nextSlasher)</code></em>",id:"logslasherupdated-address-_previousslasher-address-_nextslasher",children:[]},{value:"<strong><code>LogDarknodePaymentUpdated</code></strong> <em><code>(contract IDarknodePayment _previousDarknodePayment, contract IDarknodePayment _nextDarknodePayment)</code></em>",id:"logdarknodepaymentupdated-contract-idarknodepayment-_previousdarknodepayment-contract-idarknodepayment-_nextdarknodepayment",children:[]}]}],s={toc:m};function l({components:e,...n}){return Object(r.mdx)("wrapper",Object(t.default)({},s,n,{components:e,mdxType:"MDXLayout"}),Object(r.mdx)(a.DocTag,{type:a.DocType.Reference,mdxType:"DocTag"}),Object(r.mdx)("h2",{id:"contract-darknoderegistrylogicv1"},"Contract: ",Object(r.mdx)("inlineCode",{parentName:"h2"},"DarknodeRegistryLogicV1")),Object(r.mdx)("p",null,"DarknodeRegistry is responsible for the registration and\nderegistration of Darknodes."),Object(r.mdx)("p",null,"Inherits from:"),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("inlineCode",{parentName:"li"},"DarknodeRegistryStateV1")),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("inlineCode",{parentName:"li"},"CanReclaimTokens")),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("inlineCode",{parentName:"li"},"Claimable")),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("inlineCode",{parentName:"li"},"Ownable")),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("inlineCode",{parentName:"li"},"Context")),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("inlineCode",{parentName:"li"},"Initializable"))),Object(r.mdx)("hr",null),Object(r.mdx)("br",null),Object(r.mdx)("h2",{id:"modifiers"},"Modifiers"),Object(r.mdx)("h3",{id:"onlydarknodeoperatoraddress-_darknodeid"},Object(r.mdx)("inlineCode",{parentName:"h3"},"onlyDarknodeOperator(address _darknodeID)")),Object(r.mdx)("p",null,"Restrict a function to the owner that registered the darknode."),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"onlyrefundedaddress-_darknodeid"},Object(r.mdx)("inlineCode",{parentName:"h3"},"onlyRefunded(address _darknodeID)")),Object(r.mdx)("p",null,"Restrict a function to unregistered darknodes."),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"onlyrefundableaddress-_darknodeid"},Object(r.mdx)("inlineCode",{parentName:"h3"},"onlyRefundable(address _darknodeID)")),Object(r.mdx)("p",null,"Restrict a function to refundable darknodes."),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"onlyderegisterableaddress-_darknodeid"},Object(r.mdx)("inlineCode",{parentName:"h3"},"onlyDeregisterable(address _darknodeID)")),Object(r.mdx)("p",null,"Restrict a function to registered nodes without a pending\nderegistration."),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"onlyslasher"},Object(r.mdx)("inlineCode",{parentName:"h3"},"onlySlasher()")),Object(r.mdx)("p",null,"Restrict a function to the Slasher contract."),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"onlydarknodeaddress-_darknodeid"},Object(r.mdx)("inlineCode",{parentName:"h3"},"onlyDarknode(address _darknodeID)")),Object(r.mdx)("p",null,"Restrict a function to registered nodes without a pending\nderegistration."),Object(r.mdx)("hr",null),Object(r.mdx)("br",null),Object(r.mdx)("h2",{id:"functions"},"Functions"),Object(r.mdx)("h3",{id:"initialize-string-_version-contract-rentoken-_renaddress-contract-darknoderegistrystore-_storeaddress-uint256-_minimumbond-uint256-_minimumpodsize-uint256-_minimumepochintervalseconds-uint256-_deregistrationintervalseconds-public"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"initialize"))," ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"(string _VERSION, contract RenToken _renAddress, contract DarknodeRegistryStore _storeAddress, uint256 _minimumBond, uint256 _minimumPodSize, uint256 _minimumEpochIntervalSeconds, uint256 _deregistrationIntervalSeconds)"))," (public)"),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Params")),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("p",{parentName:"li"},Object(r.mdx)("inlineCode",{parentName:"p"},"_VERSION"),": A string defining the contract version.")),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("p",{parentName:"li"},Object(r.mdx)("inlineCode",{parentName:"p"},"_renAddress"),": The address of the RenToken contract.")),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("p",{parentName:"li"},Object(r.mdx)("inlineCode",{parentName:"p"},"_storeAddress"),": The address of the DarknodeRegistryStore contract.")),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("p",{parentName:"li"},Object(r.mdx)("inlineCode",{parentName:"p"},"_minimumBond"),": The minimum bond amount that can be submitted by a\nDarknode.")),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("p",{parentName:"li"},Object(r.mdx)("inlineCode",{parentName:"p"},"_minimumPodSize"),": The minimum size of a Darknode pod.")),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("p",{parentName:"li"},Object(r.mdx)("inlineCode",{parentName:"p"},"_minimumEpochIntervalSeconds"),": The minimum number of seconds between epochs."))),Object(r.mdx)("p",null,"The contract constructor."),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"register-address-_darknodeid-bytes-_publickey-external"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"register"))," ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"(address _darknodeID, bytes _publicKey)"))," (external)"),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Params")),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("p",{parentName:"li"},Object(r.mdx)("inlineCode",{parentName:"p"},"_darknodeID"),": The darknode ID that will be registered.")),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("p",{parentName:"li"},Object(r.mdx)("inlineCode",{parentName:"p"},"_publicKey"),": The public key of the darknode. It is stored to allow\nother darknodes and traders to encrypt messages to the trader."))),Object(r.mdx)("p",null,"Register a darknode and transfer the bond to this contract.\nBefore registering, the bond transfer must be approved in the REN\ncontract. The caller must provide a public encryption key for the\ndarknode. The darknode will remain pending registration until the next\nepoch. Only after this period can the darknode be deregistered. The\ncaller of this method will be stored as the owner of the darknode."),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"deregister-address-_darknodeid-external"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"deregister"))," ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"(address _darknodeID)"))," (external)"),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Params")),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("inlineCode",{parentName:"li"},"_darknodeID"),": The darknode ID that will be deregistered. The caller\nof this method must be the owner of this darknode.")),Object(r.mdx)("p",null,"Deregister a darknode. The darknode will not be deregistered\nuntil the end of the epoch. After another epoch, the bond can be\nrefunded by calling the refund method."),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"epoch--external"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"epoch"))," ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"()"))," (external)"),Object(r.mdx)("p",null,"Progress the epoch if it is possible to do so. This captures\nthe current timestamp and current blockhash and overrides the current\nepoch."),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"transferstoreownership-contract-darknoderegistrylogicv1-_newowner-external"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"transferStoreOwnership"))," ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"(contract DarknodeRegistryLogicV1 _newOwner)"))," (external)"),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Params")),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("inlineCode",{parentName:"li"},"_newOwner"),": The address to transfer the ownership to.")),Object(r.mdx)("p",null,"Allows the contract owner to initiate an ownership transfer of\nthe DarknodeRegistryStore."),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"claimstoreownership--external"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"claimStoreOwnership"))," ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"()"))," (external)"),Object(r.mdx)("p",null,"Claims ownership of the store passed in to the constructor.\n",Object(r.mdx)("inlineCode",{parentName:"p"},"transferStoreOwnership")," must have previously been called when\ntransferring from another Darknode Registry."),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"updatedarknodepayment-contract-idarknodepayment-_darknodepayment-external"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"updateDarknodePayment"))," ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"(contract IDarknodePayment _darknodePayment)"))," (external)"),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Params")),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("inlineCode",{parentName:"li"},"_darknodePayment"),": The address of the Darknode Payment\ncontract.")),Object(r.mdx)("p",null,"Allows the contract owner to update the address of the\ndarknode payment contract."),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"updateminimumbond-uint256-_nextminimumbond-external"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"updateMinimumBond"))," ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"(uint256 _nextMinimumBond)"))," (external)"),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Params")),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("inlineCode",{parentName:"li"},"_nextMinimumBond"),": The minimum bond amount that can be submitted by\na darknode.")),Object(r.mdx)("p",null,"Allows the contract owner to update the minimum bond."),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"updateminimumpodsize-uint256-_nextminimumpodsize-external"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"updateMinimumPodSize"))," ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"(uint256 _nextMinimumPodSize)"))," (external)"),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Params")),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("inlineCode",{parentName:"li"},"_nextMinimumPodSize"),": The minimum size of a pod.")),Object(r.mdx)("p",null,"Allows the contract owner to update the minimum pod size."),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"updateminimumepochinterval-uint256-_nextminimumepochinterval-external"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"updateMinimumEpochInterval"))," ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"(uint256 _nextMinimumEpochInterval)"))," (external)"),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Params")),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("inlineCode",{parentName:"li"},"_nextMinimumEpochInterval"),": The minimum number of blocks between epochs.")),Object(r.mdx)("p",null,"Allows the contract owner to update the minimum epoch interval."),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"updateslasher-contract-idarknodeslasher-_slasher-external"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"updateSlasher"))," ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"(contract IDarknodeSlasher _slasher)"))," (external)"),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Params")),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("inlineCode",{parentName:"li"},"_slasher"),": The new slasher address.")),Object(r.mdx)("p",null,"Allow the contract owner to update the DarknodeSlasher contract\naddress."),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"slash-address-_guilty-address-_challenger-uint256-_percentage-external"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"slash"))," ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"(address _guilty, address _challenger, uint256 _percentage)"))," (external)"),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Params")),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("p",{parentName:"li"},Object(r.mdx)("inlineCode",{parentName:"p"},"_guilty"),": The guilty prover whose bond is being slashed.")),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("p",{parentName:"li"},Object(r.mdx)("inlineCode",{parentName:"p"},"_challenger"),": The challenger who should receive a portion of the bond as reward.")),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("p",{parentName:"li"},Object(r.mdx)("inlineCode",{parentName:"p"},"_percentage"),": The total percentage  of bond to be slashed."))),Object(r.mdx)("p",null,"Allow the DarknodeSlasher contract to slash a portion of darknode's\nbond and deregister it."),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"refund-address-_darknodeid-external"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"refund"))," ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"(address _darknodeID)"))," (external)"),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Params")),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("inlineCode",{parentName:"li"},"_darknodeID"),": The darknode ID that will be refunded.")),Object(r.mdx)("p",null,"Refund the bond of a deregistered darknode. This will make the\ndarknode available for registration again. Anyone can call this function\nbut the bond will always be refunded to the darknode operator."),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"getdarknodeoperator-address-_darknodeid-\u2192-address-payable-external"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"getDarknodeOperator"))," ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"(address _darknodeID) \u2192 address payable"))," (external)"),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Params")),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("inlineCode",{parentName:"li"},"_darknodeID"),": The ID of the darknode to retrieve the owner for.")),Object(r.mdx)("p",null,"Retrieves the address of the account that registered a darknode."),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"getdarknodebond-address-_darknodeid-\u2192-uint256-external"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"getDarknodeBond"))," ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"(address _darknodeID) \u2192 uint256"))," (external)"),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Params")),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("inlineCode",{parentName:"li"},"_darknodeID"),": The ID of the darknode to retrieve the bond for.")),Object(r.mdx)("p",null,"Retrieves the bond amount of a darknode in 10^-18 REN."),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"getdarknodepublickey-address-_darknodeid-\u2192-bytes-external"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"getDarknodePublicKey"))," ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"(address _darknodeID) \u2192 bytes"))," (external)"),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Params")),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("inlineCode",{parentName:"li"},"_darknodeID"),": The ID of the darknode to retrieve the public key for.")),Object(r.mdx)("p",null,"Retrieves the encryption public key of the darknode."),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"getdarknodes-address-_start-uint256-_count-\u2192-address-external"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"getDarknodes"))," ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"(address _start, uint256 _count) \u2192 address[]"))," (external)"),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Params")),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("p",{parentName:"li"},Object(r.mdx)("inlineCode",{parentName:"p"},"_start"),": A darknode ID used as an offset for the list. If _start is\n0x0, the first dark node will be used. _start won't be\nincluded it is not registered for the epoch.")),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("p",{parentName:"li"},Object(r.mdx)("inlineCode",{parentName:"p"},"_count"),": The number of darknodes to retrieve starting from _start.\nIf _count is 0, all of the darknodes from _start are\nretrieved. If _count is more than the remaining number of\nregistered darknodes, the rest of the list will contain\n0x0s."))),Object(r.mdx)("p",null,"Retrieves a list of darknodes which are registered for the\ncurrent epoch."),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"getpreviousdarknodes-address-_start-uint256-_count-\u2192-address-external"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"getPreviousDarknodes"))," ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"(address _start, uint256 _count) \u2192 address[]"))," (external)"),Object(r.mdx)("p",null,"Retrieves a list of darknodes which were registered for the\nprevious epoch. See ",Object(r.mdx)("inlineCode",{parentName:"p"},"getDarknodes")," for the parameter documentation."),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"ispendingregistration-address-_darknodeid-\u2192-bool-public"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"isPendingRegistration"))," ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"(address _darknodeID) \u2192 bool"))," (public)"),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Params")),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("inlineCode",{parentName:"li"},"_darknodeID"),": The ID of the darknode to return.")),Object(r.mdx)("p",null,"Returns whether a darknode is scheduled to become registered\nat next epoch."),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"ispendingderegistration-address-_darknodeid-\u2192-bool-public"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"isPendingDeregistration"))," ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"(address _darknodeID) \u2192 bool"))," (public)"),Object(r.mdx)("p",null,"Returns if a darknode is in the pending deregistered state. In\nthis state a darknode is still considered registered."),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"isderegistered-address-_darknodeid-\u2192-bool-public"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"isDeregistered"))," ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"(address _darknodeID) \u2192 bool"))," (public)"),Object(r.mdx)("p",null,"Returns if a darknode is in the deregistered state."),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"isderegisterable-address-_darknodeid-\u2192-bool-public"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"isDeregisterable"))," ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"(address _darknodeID) \u2192 bool"))," (public)"),Object(r.mdx)("p",null,"Returns if a darknode can be deregistered. This is true if the\ndarknodes is in the registered state and has not attempted to\nderegister yet."),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"isrefunded-address-_darknodeid-\u2192-bool-public"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"isRefunded"))," ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"(address _darknodeID) \u2192 bool"))," (public)"),Object(r.mdx)("p",null,"Returns if a darknode is in the refunded state. This is true\nfor darknodes that have never been registered, or darknodes that have\nbeen deregistered and refunded."),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"isrefundable-address-_darknodeid-\u2192-bool-public"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"isRefundable"))," ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"(address _darknodeID) \u2192 bool"))," (public)"),Object(r.mdx)("p",null,"Returns if a darknode is refundable. This is true for darknodes\nthat have been in the deregistered state for one full epoch."),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"darknoderegisteredat-address-darknodeid-\u2192-uint256-external"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"darknodeRegisteredAt"))," ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"(address darknodeID) \u2192 uint256"))," (external)"),Object(r.mdx)("p",null,"Returns the registration time of a given darknode."),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"darknodederegisteredat-address-darknodeid-\u2192-uint256-external"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"darknodeDeregisteredAt"))," ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"(address darknodeID) \u2192 uint256"))," (external)"),Object(r.mdx)("p",null,"Returns the deregistration time of a given darknode."),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"isregistered-address-_darknodeid-\u2192-bool-public"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"isRegistered"))," ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"(address _darknodeID) \u2192 bool"))," (public)"),Object(r.mdx)("p",null,"Returns if a darknode is in the registered state."),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"isregisteredinpreviousepoch-address-_darknodeid-\u2192-bool-public"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"isRegisteredInPreviousEpoch"))," ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"(address _darknodeID) \u2192 bool"))," (public)"),Object(r.mdx)("p",null,"Returns if a darknode was in the registered state last epoch."),Object(r.mdx)("hr",null),Object(r.mdx)("br",null),Object(r.mdx)("h2",{id:"events"},"Events"),Object(r.mdx)("h3",{id:"logdarknoderegistered-address-_darknodeoperator-address-_darknodeid-uint256-_bond"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"LogDarknodeRegistered"))," ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"(address _darknodeOperator, address _darknodeID, uint256 _bond)"))),Object(r.mdx)("p",null,"Emitted when a darknode is registered."),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Params")),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("p",{parentName:"li"},Object(r.mdx)("inlineCode",{parentName:"p"},"_darknodeOperator"),": The owner of the darknode.")),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("p",{parentName:"li"},Object(r.mdx)("inlineCode",{parentName:"p"},"_darknodeID"),": The ID of the darknode that was registered.")),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("p",{parentName:"li"},Object(r.mdx)("inlineCode",{parentName:"p"},"_bond"),": The amount of REN that was transferred as bond."))),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"logdarknodederegistered-address-_darknodeoperator-address-_darknodeid"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"LogDarknodeDeregistered"))," ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"(address _darknodeOperator, address _darknodeID)"))),Object(r.mdx)("p",null,"Emitted when a darknode is deregistered."),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Params")),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("p",{parentName:"li"},Object(r.mdx)("inlineCode",{parentName:"p"},"_darknodeOperator"),": The owner of the darknode.")),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("p",{parentName:"li"},Object(r.mdx)("inlineCode",{parentName:"p"},"_darknodeID"),": The ID of the darknode that was deregistered."))),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"logdarknoderefunded-address-_darknodeoperator-address-_darknodeid-uint256-_amount"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"LogDarknodeRefunded"))," ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"(address _darknodeOperator, address _darknodeID, uint256 _amount)"))),Object(r.mdx)("p",null,"Emitted when a refund has been made."),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Params")),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("p",{parentName:"li"},Object(r.mdx)("inlineCode",{parentName:"p"},"_darknodeOperator"),": The owner of the darknode.")),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("p",{parentName:"li"},Object(r.mdx)("inlineCode",{parentName:"p"},"_amount"),": The amount of REN that was refunded."))),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"logdarknodeslashed-address-_darknodeoperator-address-_darknodeid-address-_challenger-uint256-_percentage"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"LogDarknodeSlashed"))," ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"(address _darknodeOperator, address _darknodeID, address _challenger, uint256 _percentage)"))),Object(r.mdx)("p",null,"Emitted when a darknode's bond is slashed."),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Params")),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("p",{parentName:"li"},Object(r.mdx)("inlineCode",{parentName:"p"},"_darknodeOperator"),": The owner of the darknode.")),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("p",{parentName:"li"},Object(r.mdx)("inlineCode",{parentName:"p"},"_darknodeID"),": The ID of the darknode that was slashed.")),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("p",{parentName:"li"},Object(r.mdx)("inlineCode",{parentName:"p"},"_challenger"),": The address of the account that submitted the challenge.")),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("p",{parentName:"li"},Object(r.mdx)("inlineCode",{parentName:"p"},"_percentage"),": The total percentage  of bond slashed."))),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"lognewepoch-uint256-epochhash"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"LogNewEpoch"))," ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"(uint256 epochhash)"))),Object(r.mdx)("p",null,"Emitted when a new epoch has begun."),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"logminimumbondupdated-uint256-_previousminimumbond-uint256-_nextminimumbond"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"LogMinimumBondUpdated"))," ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"(uint256 _previousMinimumBond, uint256 _nextMinimumBond)"))),Object(r.mdx)("p",null,"Emitted when a constructor parameter has been updated."),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"logminimumpodsizeupdated-uint256-_previousminimumpodsize-uint256-_nextminimumpodsize"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"LogMinimumPodSizeUpdated"))," ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"(uint256 _previousMinimumPodSize, uint256 _nextMinimumPodSize)"))),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"logminimumepochintervalupdated-uint256-_previousminimumepochinterval-uint256-_nextminimumepochinterval"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"LogMinimumEpochIntervalUpdated"))," ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"(uint256 _previousMinimumEpochInterval, uint256 _nextMinimumEpochInterval)"))),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"logslasherupdated-address-_previousslasher-address-_nextslasher"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"LogSlasherUpdated"))," ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"(address _previousSlasher, address _nextSlasher)"))),Object(r.mdx)("hr",null),Object(r.mdx)("h3",{id:"logdarknodepaymentupdated-contract-idarknodepayment-_previousdarknodepayment-contract-idarknodepayment-_nextdarknodepayment"},Object(r.mdx)("strong",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"strong"},"LogDarknodePaymentUpdated"))," ",Object(r.mdx)("em",{parentName:"h3"},Object(r.mdx)("inlineCode",{parentName:"em"},"(contract IDarknodePayment _previousDarknodePayment, contract IDarknodePayment _nextDarknodePayment)"))),Object(r.mdx)("hr",null))}l.isMDXComponent=!0},415:function(e,n,d){"use strict";d.r(n),d.d(n,"MDXContext",(function(){return l})),d.d(n,"MDXProvider",(function(){return u})),d.d(n,"mdx",(function(){return h})),d.d(n,"useMDXComponents",(function(){return p})),d.d(n,"withMDXComponents",(function(){return c}));var t=d(0),r=d.n(t);function a(e,n,d){return n in e?Object.defineProperty(e,n,{value:d,enumerable:!0,configurable:!0,writable:!0}):e[n]=d,e}function o(){return(o=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var d=arguments[n];for(var t in d)Object.prototype.hasOwnProperty.call(d,t)&&(e[t]=d[t])}return e}).apply(this,arguments)}function i(e,n){var d=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),d.push.apply(d,t)}return d}function m(e){for(var n=1;n<arguments.length;n++){var d=null!=arguments[n]?arguments[n]:{};n%2?i(Object(d),!0).forEach((function(n){a(e,n,d[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(d)):i(Object(d)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(d,n))}))}return e}function s(e,n){if(null==e)return{};var d,t,r=function(e,n){if(null==e)return{};var d,t,r={},a=Object.keys(e);for(t=0;t<a.length;t++)d=a[t],n.indexOf(d)>=0||(r[d]=e[d]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)d=a[t],n.indexOf(d)>=0||Object.prototype.propertyIsEnumerable.call(e,d)&&(r[d]=e[d])}return r}var l=r.a.createContext({}),c=function(e){return function(n){var d=p(n.components);return r.a.createElement(e,o({},n,{components:d}))}},p=function(e){var n=r.a.useContext(l),d=n;return e&&(d="function"==typeof e?e(n):m(m({},n),e)),d},u=function(e){var n=p(e.components);return r.a.createElement(l.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},x=r.a.forwardRef((function(e,n){var d=e.components,t=e.mdxType,a=e.originalType,o=e.parentName,i=s(e,["components","mdxType","originalType","parentName"]),l=p(d),c=t,u=l["".concat(o,".").concat(c)]||l[c]||b[c]||a;return d?r.a.createElement(u,m(m({ref:n},i),{},{components:d})):r.a.createElement(u,m({ref:n},i))}));function h(e,n){var d=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var a=d.length,o=new Array(a);o[0]=x;var i={};for(var m in n)hasOwnProperty.call(n,m)&&(i[m]=n[m]);i.originalType=e,i.mdxType="string"==typeof e?e:t,o[1]=i;for(var s=2;s<a;s++)o[s]=d[s];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,d)}x.displayName="MDXCreateElement"},416:function(e,n,d){"use strict";var t=d(4).default;Object.defineProperty(n,"__esModule",{value:!0}),n.DocTag=n.DocType=void 0;var r=t(d(0));let a;n.DocType=a,function(e){e.Tutorial="Tutorial",e.HowTo="How To",e.Reference="Reference",e.Explanation="Explanation"}(a||(n.DocType=a={}));const o={[a.Tutorial]:"#b16bfc",[a.HowTo]:"#EC0088",[a.Reference]:"#ff823a",[a.Explanation]:"#29C0AF"};n.DocTag=({type:e,marginBottom:n})=>r.default.createElement(r.default.Fragment,null,r.default.createElement("span",{style:{border:"2px solid "+o[e]||!1,borderRadius:"5px",color:o[e]||"orange",padding:"0.1rem 0.4rem",marginBottom:void 0!==n?n:30,display:"inline-block"}},String(e)))}}]);